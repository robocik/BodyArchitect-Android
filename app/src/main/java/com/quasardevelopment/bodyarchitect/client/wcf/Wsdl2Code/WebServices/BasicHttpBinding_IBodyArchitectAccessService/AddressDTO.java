package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;
import java.util.UUID;

public class AddressDTO extends BAGlobalObject implements KvmSerializable,Serializable,WcfInterfaces.IReferenceObject {
    
    public String address1;
    public String address2;
    public String city;
    public String country;
    public String postalCode;
    
    public AddressDTO(){}
    
    public AddressDTO(SoapObject soapObject,ReferencesManager referencesTable)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasAttribute("Id"))
        {
            Object obj = soapObject.getAttribute("Id");
            referencesTable.Add((String) obj, this);
        }
        if (soapObject.hasProperty("Address1"))
        {
            Object obj = soapObject.getProperty("Address1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Address1");
                address1 = j.toString();
            }else if (obj!= null && obj instanceof String){
                address1 = (String) soapObject.getProperty("Address1");
            }
        }
        if (soapObject.hasProperty("Address2"))
        {
            Object obj = soapObject.getProperty("Address2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Address2");
                address2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                address2 = (String) soapObject.getProperty("Address2");
            }
        }
        if (soapObject.hasProperty("City"))
        {
            Object obj = soapObject.getProperty("City");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("City");
                city = j.toString();
            }else if (obj!= null && obj instanceof String){
                city = (String) soapObject.getProperty("City");
            }
        }
        if (soapObject.hasProperty("Country"))
        {
            Object obj = soapObject.getProperty("Country");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Country");
                country = j.toString();
            }else if (obj!= null && obj instanceof String){
                country = (String) soapObject.getProperty("Country");
            }
        }
        if (soapObject.hasProperty("PostalCode"))
        {
            Object obj = soapObject.getProperty("PostalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("PostalCode");
                postalCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                postalCode = (String) soapObject.getProperty("PostalCode");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                globalId = UUID.fromString((String) soapObject.getProperty("GlobalId"));
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return globalId;
            case 1:
                return address1;
            case 2:
                return address2;
            case 3:
                return city;
            case 4:
                return country;
            case 5:
                return postalCode;

        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 8;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Address1";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Address2";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "City";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Country";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PostalCode";
                break;

        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
