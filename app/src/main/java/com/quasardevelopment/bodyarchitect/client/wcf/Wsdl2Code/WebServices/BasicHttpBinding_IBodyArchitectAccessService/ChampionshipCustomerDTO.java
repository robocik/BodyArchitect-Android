package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.ChampionshipCustomerType;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;

public class ChampionshipCustomerDTO implements KvmSerializable,Serializable {
    
    public String comment;
    public String customerId;
    public ChampionshipGroupDTO group;
    public double total;
    public boolean totalSpecified;
    public double totalWilks;
    public boolean totalWilksSpecified;
    public ChampionshipCustomerType type;
    public boolean typeSpecified;
    public double weight;
    public boolean weightSpecified;
    public String weightDateTime;
    public boolean weightDateTimeSpecified;
    public String globalId;
    public String id;
    public String ref;
    
    public ChampionshipCustomerDTO(){}
    
    public ChampionshipCustomerDTO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Comment"))
        {
            Object obj = soapObject.getProperty("Comment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Comment");
                comment = j.toString();
            }else if (obj!= null && obj instanceof String){
                comment = (String) soapObject.getProperty("Comment");
            }
        }
        if (soapObject.hasProperty("CustomerId"))
        {
            Object obj = soapObject.getProperty("CustomerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CustomerId");
                customerId = j.toString();
            }else if (obj!= null && obj instanceof String){
                customerId = (String) soapObject.getProperty("CustomerId");
            }
        }
        if (soapObject.hasProperty("Group"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Group");
            group =  new ChampionshipGroupDTO (j);
            
        }
        if (soapObject.hasProperty("Total"))
        {
            Object obj = soapObject.getProperty("Total");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Total");
                total = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                total = (Integer) soapObject.getProperty("Total");
            }
        }
        if (soapObject.hasProperty("TotalSpecified"))
        {
            Object obj = soapObject.getProperty("TotalSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TotalSpecified");
                totalSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalSpecified = (Boolean) soapObject.getProperty("TotalSpecified");
            }
        }
        if (soapObject.hasProperty("TotalWilks"))
        {
            Object obj = soapObject.getProperty("TotalWilks");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TotalWilks");
                totalWilks = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalWilks = (Integer) soapObject.getProperty("TotalWilks");
            }
        }
        if (soapObject.hasProperty("TotalWilksSpecified"))
        {
            Object obj = soapObject.getProperty("TotalWilksSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TotalWilksSpecified");
                totalWilksSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalWilksSpecified = (Boolean) soapObject.getProperty("TotalWilksSpecified");
            }
        }
        if (soapObject.hasProperty("Type"))
        {
            Object obj = soapObject.getProperty("Type");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Type");
                type = ChampionshipCustomerType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("TypeSpecified"))
        {
            Object obj = soapObject.getProperty("TypeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TypeSpecified");
                typeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                typeSpecified = (Boolean) soapObject.getProperty("TypeSpecified");
            }
        }
        if (soapObject.hasProperty("Weight"))
        {
            Object obj = soapObject.getProperty("Weight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Weight");
                weight = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                weight = (Integer) soapObject.getProperty("Weight");
            }
        }
        if (soapObject.hasProperty("WeightSpecified"))
        {
            Object obj = soapObject.getProperty("WeightSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("WeightSpecified");
                weightSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                weightSpecified = (Boolean) soapObject.getProperty("WeightSpecified");
            }
        }
        if (soapObject.hasProperty("WeightDateTime"))
        {
            Object obj = soapObject.getProperty("WeightDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("WeightDateTime");
                weightDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                weightDateTime = (String) soapObject.getProperty("WeightDateTime");
            }
        }
        if (soapObject.hasProperty("WeightDateTimeSpecified"))
        {
            Object obj = soapObject.getProperty("WeightDateTimeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("WeightDateTimeSpecified");
                weightDateTimeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                weightDateTimeSpecified = (Boolean) soapObject.getProperty("WeightDateTimeSpecified");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = j.toString();
            }else if (obj!= null && obj instanceof String){
                globalId = (String) soapObject.getProperty("GlobalId");
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Id");
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) soapObject.getProperty("Id");
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Ref");
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) soapObject.getProperty("Ref");
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return comment;
            case 1:
                return customerId;
            case 2:
                return group;
            case 3:
                return total;
            case 4:
                return totalSpecified;
            case 5:
                return totalWilks;
            case 6:
                return totalWilksSpecified;
            case 7:
                return type.toString();
            case 8:
                return typeSpecified;
            case 9:
                return weight;
            case 10:
                return weightSpecified;
            case 11:
                return weightDateTime;
            case 12:
                return weightDateTimeSpecified;
            case 13:
                return globalId;
            case 14:
                return id;
            case 15:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 16;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Comment";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CustomerId";
                break;
            case 2:
                info.type = ChampionshipGroupDTO.class;
                info.name = "Group";
                break;
            case 3:
                info.type = Double.class;
                info.name = "Total";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TotalSpecified";
                break;
            case 5:
                info.type = Double.class;
                info.name = "TotalWilks";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TotalWilksSpecified";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Type";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TypeSpecified";
                break;
            case 9:
                info.type = Double.class;
                info.name = "Weight";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "WeightSpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "WeightDateTime";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "WeightDateTimeSpecified";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
