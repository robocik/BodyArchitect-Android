package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.util.DateTimeHelper;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.TrainingEnd;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.text.ParseException;
import java.util.Date;
import java.util.Hashtable;
import java.util.UUID;

public class MyTrainingLightDTO implements KvmSerializable,Serializable,WcfInterfaces.IReferenceObject {

    public UUID customerId;
    public Date endDate;
    public String name;
    public int percentageCompleted;
    public UUID profileId;
    public String remindBefore;
    public Date startDate;
    public TrainingEnd trainingEnd;
    public UUID typeId;
    public UUID globalId;
    public String id;
    public String ref;
    
    public MyTrainingLightDTO(){}
    
    public MyTrainingLightDTO(SoapObject soapObject,ReferencesManager referencesTable)     throws ParseException
    {
        if (soapObject == null)
            return;
        if (soapObject.hasAttribute("Id"))
        {
            Object obj = soapObject.getAttribute("Id");
            id = (String) obj;
            referencesTable.Add(id, this);
        }
        if (soapObject.hasProperty("CustomerId"))
        {
            Object obj = soapObject.getProperty("CustomerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CustomerId");
                customerId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                customerId = UUID.fromString((String) soapObject.getProperty("CustomerId"));
            }
        }
        if (soapObject.hasProperty("EndDate"))
        {
            Object obj = soapObject.getProperty("EndDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("EndDate");
                endDate = DateTimeHelper.ConvertFromWebService(j.toString());
            }else if (obj!= null && obj instanceof String){
                endDate = DateTimeHelper.ConvertFromWebService((String) soapObject.getProperty("EndDate"));
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Name");
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) soapObject.getProperty("Name");
            }
        }
        if (soapObject.hasProperty("PercentageCompleted"))
        {
            Object obj = soapObject.getProperty("PercentageCompleted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("PercentageCompleted");
                percentageCompleted = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                percentageCompleted = (Integer) soapObject.getProperty("PercentageCompleted");
            }
        }
        if (soapObject.hasProperty("ProfileId"))
        {
            Object obj = soapObject.getProperty("ProfileId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ProfileId");
                profileId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                profileId = UUID.fromString((String) soapObject.getProperty("ProfileId"));
            }
        }
        if (soapObject.hasProperty("RemindBefore"))
        {
            Object obj = soapObject.getProperty("RemindBefore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RemindBefore");
                remindBefore = j.toString();
            }else if (obj!= null && obj instanceof String){
                remindBefore =(String) soapObject.getProperty("RemindBefore");
            }
        }
        if (soapObject.hasProperty("StartDate"))
        {
            Object obj = soapObject.getProperty("StartDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("StartDate");
                startDate = DateTimeHelper.ConvertFromWebService(j.toString());
            }else if (obj!= null && obj instanceof String){
                startDate = DateTimeHelper.ConvertFromWebService((String) soapObject.getProperty("StartDate"));
            }
        }
        if (soapObject.hasProperty("TrainingEnd"))
        {
            Object obj = soapObject.getProperty("TrainingEnd");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TrainingEnd");
                trainingEnd = TrainingEnd.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("TypeId"))
        {
            Object obj = soapObject.getProperty("TypeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TypeId");
                typeId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                typeId = UUID.fromString((String) soapObject.getProperty("TypeId"));
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                globalId =UUID.fromString( (String) soapObject.getProperty("GlobalId"));
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Id");
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) soapObject.getProperty("Id");
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return customerId;
            case 1:
                return endDate;
            case 2:
                return name;
            case 3:
                return percentageCompleted;
            case 4:
                return profileId;
            case 5:
                return remindBefore;
            case 6:
                return startDate;
            case 7:
                return trainingEnd.toString();
            case 8:
                return typeId;
            case 9:
                return globalId;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 10;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){

            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CustomerId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "EndDate";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PercentageCompleted";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProfileId";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RemindBefore";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StartDate";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TrainingEnd";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TypeId";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
