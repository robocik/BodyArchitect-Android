package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import ch.lambdaj.function.matcher.Predicate;
import com.quasardevelopment.bodyarchitect.client.util.ApplicationState;
import com.quasardevelopment.bodyarchitect.client.util.DateTimeHelper;
import com.quasardevelopment.bodyarchitect.client.util.Helper;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.Gender;
import org.joda.time.DateTime;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.text.ParseException;
import java.util.Hashtable;
import java.util.UUID;

import static ch.lambdaj.Lambda.filter;

public class UserDTO extends BAGlobalObject implements KvmSerializable,Serializable,WcfInterfaces.IReferenceObject {
    
    public int countryId;
    public DateTime creationDate;
    public Gender gender=Gender.NotSet;
    public boolean isDeleted;
    public PictureInfoDTO picture;
    public ProfilePrivacyDTO privacy;
    public String userName;
    public int version;
    
    public UserDTO(){}
    
    public UserDTO(SoapObject soapObject,ReferencesManager referencesTable)     throws ParseException
    {
        if (soapObject == null)
            return;
        if (soapObject.hasAttribute("Id"))
        {
            Object obj = soapObject.getAttribute("Id");
            referencesTable.Add((String) obj, this);
        }
        if (soapObject.hasProperty("CountryId"))
        {
            Object obj = soapObject.getProperty("CountryId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CountryId");
                countryId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                countryId = (Integer) soapObject.getProperty("CountryId");
            }
        }
        if (soapObject.hasProperty("CreationDate"))
        {
            Object obj = soapObject.getProperty("CreationDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CreationDate");
                creationDate = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                creationDate = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("CreationDate"));
            }
        }
        if (soapObject.hasProperty("Gender"))
        {
            Object obj = soapObject.getProperty("Gender");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Gender");
                gender = Gender.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsDeleted"))
        {
            Object obj = soapObject.getProperty("IsDeleted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("IsDeleted");
                isDeleted = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isDeleted = (Boolean) soapObject.getProperty("IsDeleted");
            }
        }
        if (soapObject.hasProperty("Picture"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Picture");

            picture = (PictureInfoDTO) referencesTable.get(j,PictureInfoDTO.class);
            
        }
        if (soapObject.hasProperty("Privacy"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Privacy");
            privacy =  new ProfilePrivacyDTO (j);
            
        }
        if (soapObject.hasProperty("UserName"))
        {
            Object obj = soapObject.getProperty("UserName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UserName");
                userName = j.toString();
            }else if (obj!= null && obj instanceof String){
                userName = (String) soapObject.getProperty("UserName");
            }
        }
        if (soapObject.hasProperty("Version"))
        {
            Object obj = soapObject.getProperty("Version");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Version");
                version = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                version = (Integer) soapObject.getProperty("Version");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                globalId = UUID.fromString((String) soapObject.getProperty("GlobalId"));
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return globalId;
            case 1:
                return countryId;
            case 2:
                return creationDate;
            case 3:
                return gender.toString();
            case 4:
                return isDeleted;
            case 5:
                if(picture!=null && Helper.isEmpty(picture.pictureId))
                {
                    return null;
                }
                return picture;
            case 6:
                return privacy;
            case 7:
                return userName;
            case 8:
                return version;

        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 9;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CountryId";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreationDate";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Gender";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsDeleted";
                break;
            case 5:
                info.type = PictureInfoDTO.class;
                info.name = "Picture";
                break;
            case 6:
                info.type = ProfilePrivacyDTO.class;
                info.name = "Privacy";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "UserName";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Version";
                break;

        }
        info.namespace= WcfConstans.ServiceNamespace;
    }


    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    public boolean isMe()
    {
        return ApplicationState.getCurrent()!=null && ApplicationState.getCurrent().getSessionData()!=null && ApplicationState.getCurrent().getSessionData().profile.globalId.equals(globalId);
    }

    public boolean haveAccess(WS_Enums.Privacy privacy)
    {
        if (privacy == WS_Enums.Privacy.Public || (privacy ==WS_Enums.Privacy.FriendsOnly && isFriend()))
        {
            return true;
        }
        return false;
    }

    public boolean isFriend()
    {
        return filter(new Predicate<UserDTO>() {
            public boolean apply(UserDTO item) {
                return item.globalId.equals(globalId);
            }
        }, ApplicationState.getCurrent().getProfileInfo().friends).size()>0;
    }

    public boolean isInvited()
    {
        return filter(new Predicate<FriendInvitationDTO>() {
            public boolean apply(FriendInvitationDTO item) {
                return (item.invited!=null && item.invited.globalId.equals(globalId)) || (item.inviter!=null && item.inviter.globalId.equals(globalId));
            }
        }, ApplicationState.getCurrent().getProfileInfo().invitations).size()>0;

    }

    public boolean isFavorite()
    {
        return filter(new Predicate<UserDTO>() {
            public boolean apply(UserDTO item) {
                return item.globalId.equals(globalId);
            }
        }, ApplicationState.getCurrent().getProfileInfo().favoriteUsers).size()>0;
    }
}
