package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.util.DateTimeHelper;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import org.joda.time.DateTime;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.text.ParseException;
import java.util.Hashtable;
import java.util.UUID;

public class SuplementDTO extends BAGlobalObject implements KvmSerializable,Serializable,WcfInterfaces.IReferenceObject
{
    
    public boolean canBeIllegal;
    public String comment;
    public DateTime creationDate;
    public boolean isProduct;
    public String name;
    public UUID profileId;
    public float rating;
    public float userRating;
    public String userShortComment;
    
    public SuplementDTO(){}
    
    public SuplementDTO(SoapObject soapObject,ReferencesManager referencesTable)  throws ParseException
    {
        if (soapObject == null)
            return;
        if (soapObject.hasAttribute("Id"))
        {
            Object obj = soapObject.getAttribute("Id");
            referencesTable.Add((String) obj, this);
        }
        if (soapObject.hasProperty("CanBeIllegal"))
        {
            Object obj = soapObject.getProperty("CanBeIllegal");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CanBeIllegal");
                canBeIllegal = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                canBeIllegal = (Boolean) soapObject.getProperty("CanBeIllegal");
            }
        }
        if (soapObject.hasProperty("Comment"))
        {
            Object obj = soapObject.getProperty("Comment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Comment");
                comment = j.toString();
            }else if (obj!= null && obj instanceof String){
                comment = (String) soapObject.getProperty("Comment");
            }
        }
        if (soapObject.hasProperty("CreationDate"))
        {
            Object obj = soapObject.getProperty("CreationDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CreationDate");
                creationDate = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                creationDate = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("CreationDate"));
            }
        }
        if (soapObject.hasProperty("IsProduct"))
        {
            Object obj = soapObject.getProperty("IsProduct");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("IsProduct");
                isProduct = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isProduct = (Boolean) soapObject.getProperty("IsProduct");
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Name");
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) soapObject.getProperty("Name");
            }
        }
        if (soapObject.hasProperty("ProfileId"))
        {
            Object obj = soapObject.getProperty("ProfileId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ProfileId");
                profileId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                profileId = UUID.fromString((String) soapObject.getProperty("ProfileId"));
            }
        }
        if (soapObject.hasProperty("Rating"))
        {
            Object obj = soapObject.getProperty("Rating");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Rating");
                rating = Float.parseFloat(j.toString());
            }else if (obj!= null && obj instanceof Number){
                rating = (Integer) soapObject.getProperty("Rating");
            }
        }
        if (soapObject.hasProperty("UserRating"))
        {
            Object obj = soapObject.getProperty("UserRating");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UserRating");
                userRating = Float.parseFloat(j.toString());
            }else if (obj!= null && obj instanceof Number){
                userRating = (Integer) soapObject.getProperty("UserRating");
            }
        }
        if (soapObject.hasProperty("UserShortComment"))
        {
            Object obj = soapObject.getProperty("UserShortComment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UserShortComment");
                userShortComment = j.toString();
            }else if (obj!= null && obj instanceof String){
                userShortComment = (String) soapObject.getProperty("UserShortComment");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                globalId = UUID.fromString((String) soapObject.getProperty("GlobalId"));
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return globalId;

            case 1:
                return comment;
            case 2:
                return creationDate;
            case 3:
                return isProduct;
            case 4:
                return name;
            case 5:
                return profileId;
            case 6:
                return rating;
            case 7:
                return userRating;
            case 8:
                return userShortComment;
            case 9:
                return canBeIllegal;

        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 10;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Comment";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreationDate";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsProduct";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProfileId";
                break;
            case 6:
                info.type = Float.class;
                info.name = "Rating";
                break;
            case 7:
                info.type = Float.class;
                info.name = "UserRating";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "UserShortComment";
                break;

            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "CanBeIllegal";
                break;
        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
