package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.DosageType;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;
import java.util.UUID;

public class SuplementItemDTO extends BAGlobalObject implements KvmSerializable,Serializable,WcfInterfaces.IReferenceObject {
    
    public String comment;
    public double dosage;
    public DosageType dosageType=DosageType.Grams;
    public String name;
    public SuplementDTO suplement;
    public SuplementsEntryDTO suplementsEntry;
    public BATimeDTO time=new BATimeDTO();
    
    public SuplementItemDTO(){}
    
    public SuplementItemDTO(SoapObject soapObject,ReferencesManager referencesTable)   throws Exception
    {
        if (soapObject == null)
            return;
        if (soapObject.hasAttribute("Id"))
        {
            Object obj = soapObject.getAttribute("Id");
            referencesTable.Add((String) obj, this);
        }
        if (soapObject.hasProperty("Comment"))
        {
            Object obj = soapObject.getProperty("Comment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Comment");
                comment = j.toString();
            }else if (obj!= null && obj instanceof String){
                comment = (String) soapObject.getProperty("Comment");
            }
        }
        if (soapObject.hasProperty("Dosage"))
        {
            Object obj = soapObject.getProperty("Dosage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Dosage");
                dosage = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                dosage = (Integer) soapObject.getProperty("Dosage");
            }
        }
        if (soapObject.hasProperty("DosageType"))
        {
            Object obj = soapObject.getProperty("DosageType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DosageType");
                dosageType = DosageType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Name");
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) soapObject.getProperty("Name");
            }
        }
        if (soapObject.hasProperty("Suplement"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Suplement");
            suplement = (SuplementDTO)referencesTable.get(j,SuplementDTO.class);
            
        }
        if (soapObject.hasProperty("SuplementsEntry"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("SuplementsEntry");
            suplementsEntry = (SuplementsEntryDTO)referencesTable.get(j,SuplementsEntryDTO.class);
            
        }
        if (soapObject.hasProperty("Time"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Time");
            time =  new BATimeDTO (j);
            
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                globalId = UUID.fromString((String) soapObject.getProperty("GlobalId"));
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return globalId;
            case 1:
                return comment;
            case 2:
                return dosage;
            case 3:
                return dosageType.toString();
            case 4:
                return name;
            case 5:
                return suplement;
            case 6:
                return suplementsEntry;
            case 7:
                return time;

        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 8;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Comment";
                break;
            case 2:
                info.type = Double.class;
                info.name = "Dosage";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DosageType";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 5:
                info.type = SuplementDTO.class;
                info.name = "Suplement";
                break;
            case 6:
                info.type = SuplementsEntryDTO.class;
                info.name = "SuplementsEntry";
                break;
            case 7:
                info.type = BATimeDTO.class;
                info.name = "Time";
                break;
        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
