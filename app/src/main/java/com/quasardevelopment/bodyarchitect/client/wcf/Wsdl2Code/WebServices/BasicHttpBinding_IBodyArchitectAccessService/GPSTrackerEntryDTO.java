package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.util.DateTimeHelper;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.Mood;
import org.joda.time.DateTime;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;

public class GPSTrackerEntryDTO extends EntryObjectDTO implements Serializable {
    
    public Integer avgHeartRate;
    public Double avgSpeed;
    public Double calories;
    public Double distance;
    public Double duration;
    public DateTime endDateTime;
    public ExerciseLightDTO exercise;
    public boolean hasCoordinates;
    public Double maxAltitude;
    public Integer maxHeartRate;
    public Double maxSpeed;
    public Double minAltitude;
    public Mood mood=Mood.Normal;
    public DateTime startDateTime;
    public Double totalAscent;
    public Double totalDescent;
    public WeatherDTO weather=new WeatherDTO();
    
    public GPSTrackerEntryDTO(){}
    
    public GPSTrackerEntryDTO(SoapObject soapObject,ReferencesManager referencesTable)  throws Exception
    {
        super(soapObject,referencesTable);
        if (soapObject == null)
            return;

        if (soapObject.hasProperty("AvgHeartRate"))
        {
            Object obj = soapObject.getProperty("AvgHeartRate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("AvgHeartRate");
                avgHeartRate = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                avgHeartRate = (Integer) soapObject.getProperty("AvgHeartRate");
            }
        }
        if (soapObject.hasProperty("AvgSpeed"))
        {
            Object obj = soapObject.getProperty("AvgSpeed");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("AvgSpeed");
                avgSpeed = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                avgSpeed = (Double) soapObject.getProperty("AvgSpeed");
            }
        }
        if (soapObject.hasProperty("Calories"))
        {
            Object obj = soapObject.getProperty("Calories");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Calories");
                calories = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                calories = (Double) soapObject.getProperty("Calories");
            }
        }
        if (soapObject.hasProperty("Distance"))
        {
            Object obj = soapObject.getProperty("Distance");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Distance");
                distance = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                distance = (Double) soapObject.getProperty("Distance");
            }
        }
        if (soapObject.hasProperty("Duration"))
        {
            Object obj = soapObject.getProperty("Duration");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Duration");
                duration = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                duration = (Double) soapObject.getProperty("Duration");
            }
        }
        if (soapObject.hasProperty("EndDateTime"))
        {
            Object obj = soapObject.getProperty("EndDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("EndDateTime");
                endDateTime = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                endDateTime = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("EndDateTime"));
            }
        }
        if (soapObject.hasProperty("Exercise"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Exercise");
            exercise = (ExerciseLightDTO)referencesTable.get(j,ExerciseLightDTO.class);
            
        }
        if (soapObject.hasProperty("HasCoordinates"))
        {
            Object obj = soapObject.getProperty("HasCoordinates");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("HasCoordinates");
                hasCoordinates = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                hasCoordinates = (Boolean) soapObject.getProperty("HasCoordinates");
            }
        }
        if (soapObject.hasProperty("MaxAltitude"))
        {
            Object obj = soapObject.getProperty("MaxAltitude");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("MaxAltitude");
                maxAltitude = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                maxAltitude = (Double) soapObject.getProperty("MaxAltitude");
            }
        }
        if (soapObject.hasProperty("MaxHeartRate"))
        {
            Object obj = soapObject.getProperty("MaxHeartRate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("MaxHeartRate");
                maxHeartRate = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                maxHeartRate = (Integer) soapObject.getProperty("MaxHeartRate");
            }
        }
        if (soapObject.hasProperty("MaxSpeed"))
        {
            Object obj = soapObject.getProperty("MaxSpeed");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("MaxSpeed");
                maxSpeed = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                maxSpeed = (Double) soapObject.getProperty("MaxSpeed");
            }
        }
        if (soapObject.hasProperty("MinAltitude"))
        {
            Object obj = soapObject.getProperty("MinAltitude");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("MinAltitude");
                minAltitude = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                minAltitude = (Double) soapObject.getProperty("MinAltitude");
            }
        }
        if (soapObject.hasProperty("Mood"))
        {
            Object obj = soapObject.getProperty("Mood");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Mood");
                mood = Mood.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("StartDateTime"))
        {
            Object obj = soapObject.getProperty("StartDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("StartDateTime");
                startDateTime = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                startDateTime = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("StartDateTime"));
            }
        }
        if (soapObject.hasProperty("TotalAscent"))
        {
            Object obj = soapObject.getProperty("TotalAscent");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TotalAscent");
                totalAscent = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalAscent = (Double) soapObject.getProperty("TotalAscent");
            }
        }
        if (soapObject.hasProperty("TotalDescent"))
        {
            Object obj = soapObject.getProperty("TotalDescent");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TotalDescent");
                totalDescent = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalDescent = (Double) soapObject.getProperty("TotalDescent");
            }
        }
        if (soapObject.hasProperty("Weather"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Weather");
            weather =  new WeatherDTO (j);
            
        }

    }
    @Override
    public Object getProperty(int arg0) {
        int count=super.getPropertyCount();
        if(arg0==count)
        {
            return avgHeartRate;
        }
        if(arg0==count+1)
        {
            return avgSpeed;
        }
        if(arg0==count+2)
        {
            return calories;
        }
        if(arg0==count+3)
        {
            return distance;
        }
        if(arg0==count+4)
        {
            return duration;
        }
        if(arg0==count+5)
        {
            return endDateTime;
        }
        if(arg0==count+6)
        {
            return exercise;
        }
        if(arg0==count+7)
        {
            return hasCoordinates;
        }
        if(arg0==count+8)
        {
            return maxAltitude;
        }
        if(arg0==count+9)
        {
            return maxHeartRate;
        }
        if(arg0==count+10)
        {
            return maxSpeed;
        }
        if(arg0==count+11)
        {
            return minAltitude;
        }
        if(arg0==count+12)
        {
            return mood.toString();
        }
        if(arg0==count+13)
        {
            return startDateTime;
        }
        if(arg0==count+14)
        {
            return totalAscent;
        }
        if(arg0==count+15)
        {
            return totalDescent;
        }
        if(arg0==count+16)
        {
            return weather;
        }
        return super.getProperty(arg0);
    }
    
    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+17;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        int count=super.getPropertyCount();
        if(index==count)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "AvgHeartRate";
        }
        if(index==count+1)
        {
            info.type = Double.class;
            info.name = "AvgSpeed";
        }
        if(index==count+2)
        {
            info.type = Double.class;
            info.name = "Calories";
        }
        if(index==count+3)
        {
            info.type = Double.class;
            info.name = "Distance";
        }
        if(index==count+4)
        {
            info.type = Double.class;
            info.name = "Duration";
        }
        if(index==count+5)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "EndDateTime";
        }
        if(index==count+6)
        {
            info.type = ExerciseLightDTO.class;
            info.name = "Exercise";
        }
        if(index==count+7)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "HasCoordinates";
        }
        if(index==count+8)
        {
            info.type = Double.class;
            info.name = "MaxAltitude";
        }
        if(index==count+9)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "MaxHeartRate";
        }
        if(index==count+10)
        {
            info.type = Double.class;
            info.name = "MaxSpeed";
        }
        if(index==count+11)
        {
            info.type = Double.class;
            info.name = "MinAltitude";
        }
        if(index==count+12)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Mood";
        }
        if(index==count+13)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "StartDateTime";
        }
        if(index==count+14)
        {
            info.type = Double.class;
            info.name = "TotalAscent";
        }
        if(index==count+15)
        {
            info.type = Double.class;
            info.name = "TotalDescent";
        }
        if(index==count+16)
        {
            info.type = WeatherDTO.class;
            info.name = "Weather";
        }
        super.getPropertyInfo(index,arg1,info);

    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    public boolean hasDuration() {
        return duration!=null && duration>0.0;
    }

    public boolean hasMaxSpeed() {
        return maxSpeed!=null && maxSpeed>0.0;
    }

    public boolean hasAvgSpeed() {
        return avgSpeed!=null && avgSpeed>0.0;
    }

    public boolean hasDistance() {
        return distance!=null && distance>0;
    }

    public boolean hasWeather()
    {
        return weather!=null && weather.condition!=null && !weather.condition.equals(WS_Enums.WeatherCondition.NotSet);
    }

}
