package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.util.DateTimeHelper;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import org.joda.time.DateTime;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.text.ParseException;
import java.util.Hashtable;
import java.util.UUID;

public class ProfileDTO extends  UserDTO implements Serializable {
    
    public String aboutInformation;
    public DateTime birthday;
    public String email;
    public String password;
    public UUID previousClientInstanceId;
    public ProfileSettingsDTO settings;
    
    public ProfileDTO(){}
    
    public ProfileDTO(SoapObject soapObject,ReferencesManager referencesTable)      throws ParseException
    {
        super(soapObject,referencesTable);
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("AboutInformation"))
        {
            Object obj = soapObject.getProperty("AboutInformation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("AboutInformation");
                aboutInformation = j.toString();
            }else if (obj!= null && obj instanceof String){
                aboutInformation = (String) soapObject.getProperty("AboutInformation");
            }
        }
        if (soapObject.hasProperty("Birthday"))
        {
            Object obj = soapObject.getProperty("Birthday");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Birthday");
                birthday = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                birthday = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("Birthday"));
            }
        }
        if (soapObject.hasProperty("Email"))
        {
            Object obj = soapObject.getProperty("Email");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Email");
                email = j.toString();
            }else if (obj!= null && obj instanceof String){
                email = (String) soapObject.getProperty("Email");
            }
        }
        if (soapObject.hasProperty("Password"))
        {
            Object obj = soapObject.getProperty("Password");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Password");
                password = j.toString();
            }else if (obj!= null && obj instanceof String){
                password = (String) soapObject.getProperty("Password");
            }
        }
        if (soapObject.hasProperty("PreviousClientInstanceId"))
        {
            Object obj = soapObject.getProperty("PreviousClientInstanceId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("PreviousClientInstanceId");
                previousClientInstanceId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                previousClientInstanceId = UUID.fromString((String) soapObject.getProperty("PreviousClientInstanceId"));
            }
        }
        if (soapObject.hasProperty("Settings"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Settings");
            settings =  new ProfileSettingsDTO (j,referencesTable);
            
        }
        if (soapObject.hasProperty("CountryId"))
        {
            Object obj = soapObject.getProperty("CountryId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CountryId");
                countryId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                countryId = (Integer) soapObject.getProperty("CountryId");
            }
        }

    }
    @Override
    public Object getProperty(int arg0) {
        int count=super.getPropertyCount();
        if(arg0==count)
        {
            return aboutInformation;
        }
        if(arg0==count+1)
        {
            return birthday;
        }
        if(arg0==count+2)
        {
            return email;
        }
        if(arg0==count+3)
        {
            return password;
        }
        if(arg0==count+4)
        {
            return previousClientInstanceId;
        }
        if(arg0==count+5)
        {
            return settings;
        }

        return super.getProperty(arg0);

//        switch(arg0){
//            case 0:
//                return aboutInformation;
//            case 1:
//                return birthday;
//            case 2:
//                return email;
//            case 3:
//                return password;
//            case 4:
//                return previousClientInstanceId;
//            case 5:
//                return settings;
//            case 6:
//                return countryId;
//        }
//        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+6;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        int count=super.getPropertyCount();
        if(index==count)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "AboutInformation";
        }
        if(index==count+1)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Birthday";
        }
        if(index==count+2)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Email";
        }
        if(index==count+3)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Password";
        }
        if(index==count+4)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "PreviousClientInstanceId";
        }
        if(index==count+5)
        {
            info.type = ProfileSettingsDTO.class;
            info.name = "Settings";
        }
        super.getPropertyInfo(index,arg1,info);

//        super.getPropertyInfo(index, arg1,info);
//        switch(index){
//            case 0:
//                info.type = PropertyInfo.STRING_CLASS;
//                info.name = "AboutInformation";
//                break;
//            case 1:
//                info.type = PropertyInfo.STRING_CLASS;
//                info.name = "Birthday";
//                break;
//            case 3:
//                info.type = PropertyInfo.STRING_CLASS;
//                info.name = "Email";
//                break;
//            case 4:
//                info.type = PropertyInfo.STRING_CLASS;
//                info.name = "Password";
//                break;
//            case 5:
//                info.type = PropertyInfo.STRING_CLASS;
//                info.name = "PreviousClientInstanceId";
//                break;
//            case 6:
//                info.type = ProfileSettingsDTO.class;
//                info.name = "countryId";
//                break;
//        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
