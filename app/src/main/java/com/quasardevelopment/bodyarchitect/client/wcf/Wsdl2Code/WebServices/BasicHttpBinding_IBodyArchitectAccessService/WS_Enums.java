package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

import android.text.TextUtils;

import java.util.EnumSet;
import java.util.Set;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
public class WS_Enums {

    public enum SoapProtocolVersion{
        	Default(0),
        	Soap11(1),
        	Soap12(2);
        
        private int code;
        
        SoapProtocolVersion(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static SoapProtocolVersion fromString(String str)
        {
            if (str.equals("Default"))
                return Default;
            if (str.equals("Soap11"))
                return Soap11;
            if (str.equals("Soap12"))
                return Soap12;
            return null;
        }
    }
    public enum Mood{
        	Normal(0),
        	Bad(1),
        	Good(2);
        
        private int code;
        
        Mood(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static Mood fromString(String str)
        {
            if (str.equals("Normal"))
                return Normal;
            if (str.equals("Bad"))
                return Bad;
            if (str.equals("Good"))
                return Good;
            return null;
        }
    }
    public enum ReportStatus{
        	ShowInReport(0),
        	SkipInReport(1);
        
        private int code;
        
        ReportStatus(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ReportStatus fromString(String str)
        {
            if (str.equals("ShowInReport"))
                return ShowInReport;
            if (str.equals("SkipInReport"))
                return SkipInReport;
            return null;
        }
    }
    public enum EntryObjectStatus{
        	Done(0),
        	Planned(1),
        	System(2);
        
        private int code;
        
        EntryObjectStatus(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static EntryObjectStatus fromString(String str)
        {
            if (str.equals("Done"))
                return Done;
            if (str.equals("Planned"))
                return Planned;
            if (str.equals("System"))
                return System;
            return null;
        }
    }
    public enum AccountType{
        	User(0),
        	PremiumUser(1),
        	Instructor(2),
        	Administrator(3);
        
        private int code;
        
        AccountType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static AccountType fromString(String str)
        {
            if (str.equals("User"))
                return User;
            if (str.equals("PremiumUser"))
                return PremiumUser;
            if (str.equals("Instructor"))
                return Instructor;
            if (str.equals("Administrator"))
                return Administrator;
            return null;
        }
    }
    public enum ProfileOperation{
        	Delete(0),
        	SetStatus(1),
        	AccountType(2);
        
        private int code;
        
        ProfileOperation(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ProfileOperation fromString(String str)
        {
            if (str.equals("Delete"))
                return Delete;
            if (str.equals("SetStatus"))
                return SetStatus;
            if (str.equals("AccountType"))
                return AccountType;
            return null;
        }
    }
    public enum AccountOperationType{
        	RestorePassword(0),
        	SendActivationEmail(1);
        
        private int code;
        
        AccountOperationType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static AccountOperationType fromString(String str)
        {
            if (str.equals("RestorePassword"))
                return RestorePassword;
            if (str.equals("SendActivationEmail"))
                return SendActivationEmail;
            return null;
        }
    }
    public enum UserSearchGroup{
        Friends(0),
        Favorites(1),
        Others(2);

        private int code;

        UserSearchGroup(int code){
            this.code = code;
        }

        public int getCode(){
            return code;
        }

        public static UserSearchGroup fromString(String str)
        {
            if (str.equals("Friends"))
                return Friends;
            if (str.equals("Favorites"))
                return Favorites;
            if (str.equals("Others"))
                return Others;
            return null;
        }
    }

    public enum Gender{
        	NotSet(0),
        	Male(1),
        	Female(2);
        
        private int code;
        
        Gender(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static Gender fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("Male"))
                return Male;
            if (str.equals("Female"))
                return Female;
            return null;
        }
    }
    public enum FavoriteOperation{
        	Add(0),
        	Remove(1);
        
        private int code;
        
        FavoriteOperation(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static FavoriteOperation fromString(String str)
        {
            if (str.equals("Add"))
                return Add;
            if (str.equals("Remove"))
                return Remove;
            return null;
        }
    }
    public enum TrainingDayOperationType{
        	Add(0);
        
        private int code;
        
        TrainingDayOperationType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static TrainingDayOperationType fromString(String str)
        {
            if (str.equals("Add"))
                return Add;
            return null;
        }
    }
    public enum MessageOperationType{
        	Delete(0);
        
        private int code;
        
        MessageOperationType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static MessageOperationType fromString(String str)
        {
            if (str.equals("Delete"))
                return Delete;
            return null;
        }
    }
    public enum MessagePriority{
        	Normal(0),
        	Low(1),
        	High(2),
        	System(3);
        
        private int code;
        
        MessagePriority(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static MessagePriority fromString(String str)
        {
            if (str.equals("Normal"))
                return Normal;
            if (str.equals("Low"))
                return Low;
            if (str.equals("High"))
                return High;
            if (str.equals("System"))
                return System;
            return null;
        }
    }
    public enum InvitationType{
        	Invite(0),
        	Accept(1),
        	RejectInvitation(2),
        	RejectFriendship(3);
        
        private int code;
        
        InvitationType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static InvitationType fromString(String str)
        {
            if (str.equals("Invite"))
                return Invite;
            if (str.equals("Accept"))
                return Accept;
            if (str.equals("RejectInvitation"))
                return RejectInvitation;
            if (str.equals("RejectFriendship"))
                return RejectFriendship;
            return null;
        }
    }
    public enum InviteFriendOperation{
        	Invite(0),
        	Accept(1),
        	Reject(2);
        
        private int code;
        
        InviteFriendOperation(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static InviteFriendOperation fromString(String str)
        {
            if (str.equals("Invite"))
                return Invite;
            if (str.equals("Accept"))
                return Accept;
            if (str.equals("Reject"))
                return Reject;
            return null;
        }
    }
    public enum PlatformType{
        	Windows(0),
        	MacOS(1),
        	Android(2),
        	iPhone(3),
        	WindowsMobile(4),
        	WindowsPhone(5),
        	Linux(6),
        	Web(7),
        	Other(8);
        
        private int code;
        
        PlatformType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static PlatformType fromString(String str)
        {
            if (str.equals("Windows"))
                return Windows;
            if (str.equals("MacOS"))
                return MacOS;
            if (str.equals("Android"))
                return Android;
            if (str.equals("iPhone"))
                return iPhone;
            if (str.equals("WindowsMobile"))
                return WindowsMobile;
            if (str.equals("WindowsPhone"))
                return WindowsPhone;
            if (str.equals("Linux"))
                return Linux;
            if (str.equals("Web"))
                return Web;
            if (str.equals("Other"))
                return Other;
            return null;
        }
    }
    public enum DeleteTrainingDayMode{
        	All(0),
        	OnlyWithoutMyTraining(1);
        
        private int code;
        
        DeleteTrainingDayMode(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static DeleteTrainingDayMode fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("OnlyWithoutMyTraining"))
                return OnlyWithoutMyTraining;
            return null;
        }
    }
    public enum DropSetType
    {
        	None(0),
        	IDropSet(1),
        	IIDropSet(2),
        	IIIDropSet(3),
        	IVDropSet(4);
        
        private int code;
        
        DropSetType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static DropSetType fromString(String str)
        {
            if (str.equals("None"))
                return None;
            if (str.equals("IDropSet"))
                return IDropSet;
            if (str.equals("IIDropSet"))
                return IIDropSet;
            if (str.equals("IIIDropSet"))
                return IIIDropSet;
            if (str.equals("IVDropSet"))
                return IVDropSet;
            return null;
        }
    }
    public enum SetType{
        	Normalna(0),
        	Rozgrzewkowa(1),
        	PrawieMax(2),
        	Max(3),
        	MuscleFailure(4);
        
        private int code;
        
        SetType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static SetType fromString(String str)
        {
            if (str.equals("Normalna"))
                return Normalna;
            if (str.equals("Rozgrzewkowa"))
                return Rozgrzewkowa;
            if (str.equals("PrawieMax"))
                return PrawieMax;
            if (str.equals("Max"))
                return Max;
            if (str.equals("MuscleFailure"))
                return MuscleFailure;
            return null;
        }
    }
    public enum GetOperation{
        	Current(0),
        	First(1),
        	Previous(2),
        	Next(3),
        	Last(4);
        
        private int code;
        
        GetOperation(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static GetOperation fromString(String str)
        {
            if (str.equals("Current"))
                return Current;
            if (str.equals("First"))
                return First;
            if (str.equals("Previous"))
                return Previous;
            if (str.equals("Next"))
                return Next;
            if (str.equals("Last"))
                return Last;
            return null;
        }
    }
    public enum SearchSortOrder{
        	Newest(0),
        	HighestRating(1),
        	Name(2);
        
        private int code;
        
        SearchSortOrder(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static SearchSortOrder fromString(String str)
        {
            if (str.equals("Newest"))
                return Newest;
            if (str.equals("HighestRating"))
                return HighestRating;
            if (str.equals("Name"))
                return Name;
            return null;
        }
    }
    public enum ExerciseDifficult{
        	NotSet(0),
        	One(1),
        	Two(2),
        	Three(3),
        	Four(4);
        
        private int code;
        
        ExerciseDifficult(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ExerciseDifficult fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("One"))
                return One;
            if (str.equals("Two"))
                return Two;
            if (str.equals("Three"))
                return Three;
            if (str.equals("Four"))
                return Four;
            return null;
        }
    }
    public enum ExerciseForceType{
        	NotSet(0),
        	Push(1),
        	Pull(2),
        	Static(3);
        
        private int code;
        
        ExerciseForceType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ExerciseForceType fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("Push"))
                return Push;
            if (str.equals("Pull"))
                return Pull;
            if (str.equals("Static"))
                return Static;
            return null;
        }
    }
    public enum ExerciseType{
        	NotSet(0),
        	Biceps(1),
        	Klatka(2),
        	Plecy(3),
        	Triceps(4),
        	Barki(5),
        	Nogi(6),
        	Lydki(7),
        	Przedramie(8),
        	Brzuch(9),
        	Czworoboczny(10),
        	Cardio(11);
        
        private int code;
        
        ExerciseType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ExerciseType fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("Biceps"))
                return Biceps;
            if (str.equals("Klatka"))
                return Klatka;
            if (str.equals("Plecy"))
                return Plecy;
            if (str.equals("Triceps"))
                return Triceps;
            if (str.equals("Barki"))
                return Barki;
            if (str.equals("Nogi"))
                return Nogi;
            if (str.equals("Lydki"))
                return Lydki;
            if (str.equals("Przedramie"))
                return Przedramie;
            if (str.equals("Brzuch"))
                return Brzuch;
            if (str.equals("Czworoboczny"))
                return Czworoboczny;
            if (str.equals("Cardio"))
                return Cardio;
            return null;
        }
    }
    public enum MechanicsType{
        	NotSet(0),
        	Compound(1),
        	Isolation(2);
        
        private int code;
        
        MechanicsType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static MechanicsType fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("Compound"))
                return Compound;
            if (str.equals("Isolation"))
                return Isolation;
            return null;
        }
    }
    public enum CanBeIllegalCriteria{
        	All(0),
        	OnlyLegal(1),
        	OnlyIllegal(2);
        
        private int code;
        
        CanBeIllegalCriteria(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static CanBeIllegalCriteria fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("OnlyLegal"))
                return OnlyLegal;
            if (str.equals("OnlyIllegal"))
                return OnlyIllegal;
            return null;
        }
    }
    public enum SupplementProductCriteria{
        	All(0),
        	OnlyGeneral(1),
        	OnlyProducts(2);
        
        private int code;
        
        SupplementProductCriteria(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static SupplementProductCriteria fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("OnlyGeneral"))
                return OnlyGeneral;
            if (str.equals("OnlyProducts"))
                return OnlyProducts;
            return null;
        }
    }
    public enum ExerciseDoneWay{
        	Default(0),
        	Barbell(1),
        	Dumbbell(2),
        	Cable(3),
        	Machine(4);
        
        private int code;
        
        ExerciseDoneWay(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ExerciseDoneWay fromString(String str)
        {
            if (str.equals("Default"))
                return Default;
            if (str.equals("Barbell"))
                return Barbell;
            if (str.equals("Dumbbell"))
                return Dumbbell;
            if (str.equals("Cable"))
                return Cable;
            if (str.equals("Machine"))
                return Machine;
            return null;
        }
    }
    public enum TrainingPlanDifficult{
        	NotSet(0),
        	Beginner(1),
        	Advanced(2),
        	Professional(3);
        
        private int code;
        
        TrainingPlanDifficult(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static TrainingPlanDifficult fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("Beginner"))
                return Beginner;
            if (str.equals("Advanced"))
                return Advanced;
            if (str.equals("Professional"))
                return Professional;
            return null;
        }
    }
    public enum WorkoutPlanPurpose{
        	NotSet(0),
        	Strength(1),
        	Mass(2),
        	FatLost(3),
        	Definition(4),
        	Other(5);
        
        private int code;
        
        WorkoutPlanPurpose(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static WorkoutPlanPurpose fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("Strength"))
                return Strength;
            if (str.equals("Mass"))
                return Mass;
            if (str.equals("FatLost"))
                return FatLost;
            if (str.equals("Definition"))
                return Definition;
            if (str.equals("Other"))
                return Other;
            return null;
        }
    }
    public enum TrainingType{
        	Split(0),
        	FBW(1),
        	HIT(2),
        	ABW(3),
        	HST(4),
        	PushPull(5),
        	ACT(6),
        	Other(7);
        
        private int code;
        
        TrainingType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static TrainingType fromString(String str)
        {
            if (str.equals("Split"))
                return Split;
            if (str.equals("FBW"))
                return FBW;
            if (str.equals("HIT"))
                return HIT;
            if (str.equals("ABW"))
                return ABW;
            if (str.equals("HST"))
                return HST;
            if (str.equals("PushPull"))
                return PushPull;
            if (str.equals("ACT"))
                return ACT;
            if (str.equals("Other"))
                return Other;
            return null;
        }
    }
    public enum PublishStatus{
        	Private(0),
        	Published(1);
        
        private int code;
        
        PublishStatus(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static PublishStatus fromString(String str)
        {
            if (str.equals("Private"))
                return Private;
            if (str.equals("Published"))
                return Published;
            return null;
        }
    }
    public enum SupplementsCycleDefinitionOperation{
        	Delete(0),
        	AddToFavorites(1),
        	RemoveFromFavorites(2),
        	Publish(3);
        
        private int code;
        
        SupplementsCycleDefinitionOperation(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static SupplementsCycleDefinitionOperation fromString(String str)
        {
            if (str.equals("Delete"))
                return Delete;
            if (str.equals("AddToFavorites"))
                return AddToFavorites;
            if (str.equals("RemoveFromFavorites"))
                return RemoveFromFavorites;
            if (str.equals("Publish"))
                return Publish;
            return null;
        }
    }
    public enum PrivacyCriteria{
        	All(0),
        	Accessible(1),
        	NotAccessible(2);
        
        private int code;
        
        PrivacyCriteria(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static PrivacyCriteria fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("Accessible"))
                return Accessible;
            if (str.equals("NotAccessible"))
                return NotAccessible;
            return null;
        }
    }
    public enum PictureCriteria{
        	All(0),
        	OnlyWithPicture(1),
        	OnlyWithoutPicture(2);
        
        private int code;
        
        PictureCriteria(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static PictureCriteria fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("OnlyWithPicture"))
                return OnlyWithPicture;
            if (str.equals("OnlyWithoutPicture"))
                return OnlyWithoutPicture;
            return null;
        }
    }
    public enum UsersSortOrder{
        	ByName(0),
        	ByTrainingDaysCount(1),
        	ByFollowersCount(2),
        	ByFriendsCount(3),
        	ByBlogCommentsCount(4),
        	ByVotingCount(5),
        	ByLastEntryDate(6),
        	ByLastLoginDate(7),
        	ByWorkoutPlansCount(8);
        
        private int code;
        
        UsersSortOrder(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static UsersSortOrder fromString(String str)
        {
            if (str.equals("ByName"))
                return ByName;
            if (str.equals("ByTrainingDaysCount"))
                return ByTrainingDaysCount;
            if (str.equals("ByFollowersCount"))
                return ByFollowersCount;
            if (str.equals("ByFriendsCount"))
                return ByFriendsCount;
            if (str.equals("ByBlogCommentsCount"))
                return ByBlogCommentsCount;
            if (str.equals("ByVotingCount"))
                return ByVotingCount;
            if (str.equals("ByLastEntryDate"))
                return ByLastEntryDate;
            if (str.equals("ByLastLoginDate"))
                return ByLastLoginDate;
            if (str.equals("ByWorkoutPlansCount"))
                return ByWorkoutPlansCount;
            return null;
        }
    }
    public enum UserPlanCriteria{
        	All(0),
        	OnlyWithPlans(1);
        
        private int code;
        
        UserPlanCriteria(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static UserPlanCriteria fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("OnlyWithPlans"))
                return OnlyWithPlans;
            return null;
        }
    }
    public enum ScheduleEntryState{
        	Planned(0),
        	Done(1),
        	Cancelled(2);
        
        private int code;
        
        ScheduleEntryState(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ScheduleEntryState fromString(String str)
        {
            if (str.equals("Planned"))
                return Planned;
            if (str.equals("Done"))
                return Done;
            if (str.equals("Cancelled"))
                return Cancelled;
            return null;
        }
    }
    public enum SaveScheduleEntryRangeCopyMode{
        	OnlyScheduleEntries(0),
        	All(1);
        
        private int code;
        
        SaveScheduleEntryRangeCopyMode(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static SaveScheduleEntryRangeCopyMode fromString(String str)
        {
            if (str.equals("OnlyScheduleEntries"))
                return OnlyScheduleEntries;
            if (str.equals("All"))
                return All;
            return null;
        }
    }
    public enum CustomerVirtualCriteria{
        	All(0),
        	VirtualOnly(1),
        	StandardOnly(2);
        
        private int code;
        
        CustomerVirtualCriteria(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static CustomerVirtualCriteria fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("VirtualOnly"))
                return VirtualOnly;
            if (str.equals("StandardOnly"))
                return StandardOnly;
            return null;
        }
    }
    public enum ReservationsOperationType{
        	Make(0),
        	MakeGroup(1),
        	Undo(2),
        	Presnet(3),
        	Absent(4),
        	StatusDone(5),
        	StatusCancelled(6);
        
        private int code;
        
        ReservationsOperationType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ReservationsOperationType fromString(String str)
        {
            if (str.equals("Make"))
                return Make;
            if (str.equals("MakeGroup"))
                return MakeGroup;
            if (str.equals("Undo"))
                return Undo;
            if (str.equals("Presnet"))
                return Presnet;
            if (str.equals("Absent"))
                return Absent;
            if (str.equals("StatusDone"))
                return StatusDone;
            if (str.equals("StatusCancelled"))
                return StatusCancelled;
            return null;
        }
    }
    public enum CustomerGroupRestrictedType{
        	None(0),
        	Partially(1),
        	Full(2);
        
        private int code;
        
        CustomerGroupRestrictedType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static CustomerGroupRestrictedType fromString(String str)
        {
            if (str.equals("None"))
                return None;
            if (str.equals("Partially"))
                return Partially;
            if (str.equals("Full"))
                return Full;
            return null;
        }
    }
    public enum CustomerGroupMembersCriteria{
        	All(0),
        	WithMembersOnly(1),
        	WithoutMembersOnly(2);
        
        private int code;
        
        CustomerGroupMembersCriteria(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static CustomerGroupMembersCriteria fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("WithMembersOnly"))
                return WithMembersOnly;
            if (str.equals("WithoutMembersOnly"))
                return WithoutMembersOnly;
            return null;
        }
    }
    public enum PaymentCriteria{
        	Any(0),
        	WithPayment(1),
        	WithoutPayment(2);
        
        private int code;
        
        PaymentCriteria(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static PaymentCriteria fromString(String str)
        {
            if (str.equals("Any"))
                return Any;
            if (str.equals("WithPayment"))
                return WithPayment;
            if (str.equals("WithoutPayment"))
                return WithoutPayment;
            return null;
        }
    }
    public enum ProductsSortOrder{
        	ByName(0),
        	ByPaid(1),
        	ByDate(2);
        
        private int code;
        
        ProductsSortOrder(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ProductsSortOrder fromString(String str)
        {
            if (str.equals("ByName"))
                return ByName;
            if (str.equals("ByPaid"))
                return ByPaid;
            if (str.equals("ByDate"))
                return ByDate;
            return null;
        }
    }
    public enum ReminderRepetitions{
        	Once(0),
        	EveryDay(1),
        	EveryWeek(2),
        	EveryMonth(3),
        	EveryYear(4);
        
        private int code;
        
        ReminderRepetitions(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ReminderRepetitions fromString(String str)
        {
            if (str.equals("Once"))
                return Once;
            if (str.equals("EveryDay"))
                return EveryDay;
            if (str.equals("EveryWeek"))
                return EveryWeek;
            if (str.equals("EveryMonth"))
                return EveryMonth;
            if (str.equals("EveryYear"))
                return EveryYear;
            return null;
        }
    }
    public enum ReminderType{
        	Custom(0),
        	Birthday(1),
        	ScheduleEntry(2),
        	EntryObject(3);
        
        private int code;
        
        ReminderType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ReminderType fromString(String str)
        {
            if (str.equals("Custom"))
                return Custom;
            if (str.equals("Birthday"))
                return Birthday;
            if (str.equals("ScheduleEntry"))
                return ScheduleEntry;
            if (str.equals("EntryObject"))
                return EntryObject;
            return null;
        }
    }
    public enum ReminderOperationType{
        	Delete(0),
        	CloseAfterShow(1);
        
        private int code;
        
        ReminderOperationType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ReminderOperationType fromString(String str)
        {
            if (str.equals("Delete"))
                return Delete;
            if (str.equals("CloseAfterShow"))
                return CloseAfterShow;
            return null;
        }
    }
    public enum CriteriaOperator{
        	And(0),
        	Or(1);
        
        private int code;
        
        CriteriaOperator(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static CriteriaOperator fromString(String str)
        {
            if (str.equals("And"))
                return And;
            if (str.equals("Or"))
                return Or;
            return null;
        }
    }
    public enum SupplementCycleDayRepetitions{
        	EveryDay(0),
        	OnceAWeek(1),
        	StrengthTrainingDay(2),
        	CardioTrainingDay(3),
        	NonTrainingDay(4);
        
        private int code;
        
        SupplementCycleDayRepetitions(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static SupplementCycleDayRepetitions fromString(String str)
        {
            if (str.equals("EveryDay"))
                return EveryDay;
            if (str.equals("OnceAWeek"))
                return OnceAWeek;
            if (str.equals("StrengthTrainingDay"))
                return StrengthTrainingDay;
            if (str.equals("CardioTrainingDay"))
                return CardioTrainingDay;
            if (str.equals("NonTrainingDay"))
                return NonTrainingDay;
            return null;
        }
    }
    public enum TimeType{
        	NotSet(0),
        	OnEmptyStomach(1),
        	BeforeWorkout(2),
        	AfterWorkout(3),
        	BeforeSleep(4);
        
        private int code;
        
        TimeType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static TimeType fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("OnEmptyStomach"))
                return OnEmptyStomach;
            if (str.equals("BeforeWorkout"))
                return BeforeWorkout;
            if (str.equals("AfterWorkout"))
                return AfterWorkout;
            if (str.equals("BeforeSleep"))
                return BeforeSleep;
            return null;
        }
    }
    public enum VoteObject{
        	Exercise(0),
        	WorkoutPlan(1),
        	Supplement(2),
        	SupplementCycleDefinition(3);
        
        private int code;
        
        VoteObject(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static VoteObject fromString(String str)
        {
            if (str.equals("Exercise"))
                return Exercise;
            if (str.equals("WorkoutPlan"))
                return WorkoutPlan;
            if (str.equals("Supplement"))
                return Supplement;
            if (str.equals("SupplementCycleDefinition"))
                return SupplementCycleDefinition;
            return null;
        }
    }
    public enum MyTrainingOperationType{
        	Start(0),
        	Stop(1),
        	Simulate(2);
        
        private int code;
        
        MyTrainingOperationType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static MyTrainingOperationType fromString(String str)
        {
            if (str.equals("Start"))
                return Start;
            if (str.equals("Stop"))
                return Stop;
            if (str.equals("Simulate"))
                return Simulate;
            return null;
        }
    }
    public enum TrainingEnd{
        	NotEnded(0),
        	Complete(1);
        
        private int code;
        
        TrainingEnd(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static TrainingEnd fromString(String str)
        {
            if (str.equals("NotEnded"))
                return NotEnded;
            if (str.equals("Complete"))
                return Complete;
            return null;
        }
    }
    public enum MyTrainingSortOrder{
        	Name(0),
        	StartDate(1),
        	PercentageCompleted(2);
        
        private int code;
        
        MyTrainingSortOrder(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static MyTrainingSortOrder fromString(String str)
        {
            if (str.equals("Name"))
                return Name;
            if (str.equals("StartDate"))
                return StartDate;
            if (str.equals("PercentageCompleted"))
                return PercentageCompleted;
            return null;
        }
    }
    public enum MyPlaceOperationType{
        	Delete(0),
        	SetDefault(1);
        
        private int code;
        
        MyPlaceOperationType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static MyPlaceOperationType fromString(String str)
        {
            if (str.equals("Delete"))
                return Delete;
            if (str.equals("SetDefault"))
                return SetDefault;
            return null;
        }
    }
    public enum RecordMode{
        	AllUsers(0),
        	Friends(1),
        	Customer(2);
        
        private int code;
        
        RecordMode(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static RecordMode fromString(String str)
        {
            if (str.equals("AllUsers"))
                return AllUsers;
            if (str.equals("Friends"))
                return Friends;
            if (str.equals("Customer"))
                return Customer;
            return null;
        }
    }
    public enum ChampionshipWinningCategories{
        	Seniorzy(0),
        	JuniorzyMlodsi(1),
        	Juniorzy(2),
        	Weterani1(3),
        	Weterani2(4),
        	Weterani3(5),
        	Weterani4(6),
        	MistrzMistrzow(7),
        	Druzynowa(8);
        
        private int code;
        
        ChampionshipWinningCategories(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ChampionshipWinningCategories fromString(String str)
        {
            if (str.equals("Seniorzy"))
                return Seniorzy;
            if (str.equals("JuniorzyMlodsi"))
                return JuniorzyMlodsi;
            if (str.equals("Juniorzy"))
                return Juniorzy;
            if (str.equals("Weterani1"))
                return Weterani1;
            if (str.equals("Weterani2"))
                return Weterani2;
            if (str.equals("Weterani3"))
                return Weterani3;
            if (str.equals("Weterani4"))
                return Weterani4;
            if (str.equals("MistrzMistrzow"))
                return MistrzMistrzow;
            if (str.equals("Druzynowa"))
                return Druzynowa;
            return null;
        }
    }
    public enum ChampionshipCategoryType{
        	Weight(0),
        	Open(1);
        
        private int code;
        
        ChampionshipCategoryType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ChampionshipCategoryType fromString(String str)
        {
            if (str.equals("Weight"))
                return Weight;
            if (str.equals("Open"))
                return Open;
            return null;
        }
    }
    public enum ChampionshipType{
        	ZawodyWyciskanieSztangi(0),
        	Trojboj(1);
        
        private int code;
        
        ChampionshipType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ChampionshipType fromString(String str)
        {
            if (str.equals("ZawodyWyciskanieSztangi"))
                return ZawodyWyciskanieSztangi;
            if (str.equals("Trojboj"))
                return Trojboj;
            return null;
        }
    }
    public enum ChampionshipCustomerType{
        	Normal(0),
        	OutsideCompetition(1),
        	NotClassified(2),
        	Disqualified(3);
        
        private int code;
        
        ChampionshipCustomerType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ChampionshipCustomerType fromString(String str)
        {
            if (str.equals("Normal"))
                return Normal;
            if (str.equals("OutsideCompetition"))
                return OutsideCompetition;
            if (str.equals("NotClassified"))
                return NotClassified;
            if (str.equals("Disqualified"))
                return Disqualified;
            return null;
        }
    }
    public enum GPSCoordinatesOperationType{
        	UpdateCoordinates(0),
        	UpdateCoordinatesWithCorrection(1),
        	DeleteCoordinates(2);
        
        private int code;
        
        GPSCoordinatesOperationType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static GPSCoordinatesOperationType fromString(String str)
        {
            if (str.equals("UpdateCoordinates"))
                return UpdateCoordinates;
            if (str.equals("UpdateCoordinatesWithCorrection"))
                return UpdateCoordinatesWithCorrection;
            if (str.equals("DeleteCoordinates"))
                return DeleteCoordinates;
            return null;
        }
    }
    public enum Privacy{
        	Private(0),
        	FriendsOnly(1),
        	Public(2);
        
        private int code;
        
        Privacy(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static Privacy fromString(String str)
        {
            if (str.equals("Private"))
                return Private;
            if (str.equals("FriendsOnly"))
                return FriendsOnly;
            if (str.equals("Public"))
                return Public;
            return null;
        }
    }
    public enum ProfileStatusType{
        	Normal(0);
        
        private int code;
        
        ProfileStatusType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ProfileStatusType fromString(String str)
        {
            if (str.equals("Normal"))
                return Normal;
            return null;
        }
    }
    public enum LengthType{
        	Cm(0),
        	Inchs(1);
        
        private int code;
        
        LengthType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static LengthType fromString(String str)
        {
            if (str.equals("Cm"))
                return Cm;
            if (str.equals("Inchs"))
                return Inchs;
            return null;
        }
    }
    public enum ProfileNotification{
        	None(0),
        	Message(1),
        	Email(2);
        
        private int code;
        
        ProfileNotification(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ProfileNotification fromString(String str)
        {
            if (str.equals("None"))
                return None;
            if (str.equals("Message"))
                return Message;
            if (str.equals("Email"))
                return Email;
            return null;
        }

        public static EnumSet<ProfileNotification> getStatusFlags(String notificationString)
        {
            String[] notifications=notificationString.split("\\s+");

            EnumSet statusFlags = EnumSet.noneOf(ProfileNotification.class);
            for(String val : notifications)
            {
                ProfileNotification enumValue=ProfileNotification.fromString(val);
                if(!enumValue.equals(ProfileNotification.None))
                {
                    statusFlags.add(enumValue) ;
                }
            }

            return statusFlags;
        }

        public static String getProfileNotificationValue(Set<ProfileNotification> flags)
        {
            String value="";
            for(ProfileNotification val :flags)
            {
                value+=val.toString()+" ";
            }
            if(TextUtils.isEmpty(value))
            {
                value=ProfileNotification.None.toString();
            }
            return value;
        }
    }
    public enum WeightType{
        	Kg(0),
        	Pounds(1);
        
        private int code;
        
        WeightType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static WeightType fromString(String str)
        {
            if (str.equals("Kg"))
                return Kg;
            if (str.equals("Pounds"))
                return Pounds;
            return null;
        }
    }
    public enum ChampionshipTryResult{
        	NotDone(0),
        	Success(1),
        	Fail(2);
        
        private int code;
        
        ChampionshipTryResult(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static ChampionshipTryResult fromString(String str)
        {
            if (str.equals("NotDone"))
                return NotDone;
            if (str.equals("Success"))
                return Success;
            if (str.equals("Fail"))
                return Fail;
            return null;
        }
    }
    public enum DosageType{
        	Grams(0),
        	Tablets(1),
        	Units(2),
        	Servings(3),
        	MiliGrams(4);
        
        private int code;
        
        DosageType(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static DosageType fromString(String str)
        {
            if (str.equals("Grams"))
                return Grams;
            if (str.equals("Tablets"))
                return Tablets;
            if (str.equals("Units"))
                return Units;
            if (str.equals("Servings"))
                return Servings;
            if (str.equals("MiliGrams"))
                return MiliGrams;
            return null;
        }
    }
    public enum Intensity{
        	NotSet(0),
        	Low(1),
        	Medium(2),
        	Hight(3);
        
        private int code;

        Intensity(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static Intensity fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("Low"))
                return Low;
            if (str.equals("Medium"))
                return Medium;
            if (str.equals("Hight"))
                return Hight;
            return null;
        }
    }
    public enum WeatherCondition{
        	NotSet(0),
        	ModerateOrHeavySnowWithThunder(395),
        	PatchyLightSnowWithThunder(392),
        	ModerateOrHeavyRainAreaWithThunder(389),
        	PatchyLightRainWithThunder(386),
        	ModerateOrHeavyShowersOfIcePellets(377),
        	LightShowersOfIcePellets(374),
        	ModerateOrHeavySnowShowers(371),
        	LightSnowShowers(368),
        	ModerateOrHeavySleetShowers(365),
        	LightSleetShowers(362),
        	TorrentialRainShower(359),
        	ModerateOrHeavyRainShower(356),
        	LightRainShower(353),
        	IcePellets(350),
        	HeavySnow(338),
        	PatchyHeavySnow(335),
        	ModerateSnow(332),
        	PatchyModerateSnow(329),
        	LightSnow(326),
        	PatchyLightSnow(323),
        	ModerateOrHeavySleet(320),
        	LightSleet(317),
        	ModerateOrHeavyFreezingRain(314),
        	LightFreezingRain(311),
        	HeavyRain(308),
        	HeavyRainAtTimes(305),
        	ModerateRain(302),
        	ModerateRainAtTimes(299),
        	LightRain(296),
        	PatchyLightRain(293),
        	HeavyFreezingDrizzle(284),
        	FreezingDrizzle(281),
        	LightDrizzle(266),
        	PatchyLightDrizzle(263),
        	FreezingFog(260),
        	Fog(248),
        	Blizzard(230),
        	BlowingSnow(227),
        	ThunderyOutbreaksNearby(200),
        	PatchyFreezingDrizzleNearby(185),
        	PatchySleet(182),
        	PatchySnow(179),
        	PatchyRain(176),
        	Mist(143),
        	Overcast(122),
        	Cloudy(119),
        	PartlyCloudy(116),
        	ClearSunny(113);
        
        private int code;
        
        WeatherCondition(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static WeatherCondition fromString(String str)
        {
            if (str.equals("NotSet"))
                return NotSet;
            if (str.equals("ModerateOrHeavySnowWithThunder"))
                return ModerateOrHeavySnowWithThunder;
            if (str.equals("PatchyLightSnowWithThunder"))
                return PatchyLightSnowWithThunder;
            if (str.equals("ModerateOrHeavyRainAreaWithThunder"))
                return ModerateOrHeavyRainAreaWithThunder;
            if (str.equals("PatchyLightRainWithThunder"))
                return PatchyLightRainWithThunder;
            if (str.equals("ModerateOrHeavyShowersOfIcePellets"))
                return ModerateOrHeavyShowersOfIcePellets;
            if (str.equals("LightShowersOfIcePellets"))
                return LightShowersOfIcePellets;
            if (str.equals("ModerateOrHeavySnowShowers"))
                return ModerateOrHeavySnowShowers;
            if (str.equals("LightSnowShowers"))
                return LightSnowShowers;
            if (str.equals("ModerateOrHeavySleetShowers"))
                return ModerateOrHeavySleetShowers;
            if (str.equals("LightSleetShowers"))
                return LightSleetShowers;
            if (str.equals("TorrentialRainShower"))
                return TorrentialRainShower;
            if (str.equals("ModerateOrHeavyRainShower"))
                return ModerateOrHeavyRainShower;
            if (str.equals("LightRainShower"))
                return LightRainShower;
            if (str.equals("IcePellets"))
                return IcePellets;
            if (str.equals("HeavySnow"))
                return HeavySnow;
            if (str.equals("PatchyHeavySnow"))
                return PatchyHeavySnow;
            if (str.equals("ModerateSnow"))
                return ModerateSnow;
            if (str.equals("PatchyModerateSnow"))
                return PatchyModerateSnow;
            if (str.equals("LightSnow"))
                return LightSnow;
            if (str.equals("PatchyLightSnow"))
                return PatchyLightSnow;
            if (str.equals("ModerateOrHeavySleet"))
                return ModerateOrHeavySleet;
            if (str.equals("LightSleet"))
                return LightSleet;
            if (str.equals("ModerateOrHeavyFreezingRain"))
                return ModerateOrHeavyFreezingRain;
            if (str.equals("LightFreezingRain"))
                return LightFreezingRain;
            if (str.equals("HeavyRain"))
                return HeavyRain;
            if (str.equals("HeavyRainAtTimes"))
                return HeavyRainAtTimes;
            if (str.equals("ModerateRain"))
                return ModerateRain;
            if (str.equals("ModerateRainAtTimes"))
                return ModerateRainAtTimes;
            if (str.equals("LightRain"))
                return LightRain;
            if (str.equals("PatchyLightRain"))
                return PatchyLightRain;
            if (str.equals("HeavyFreezingDrizzle"))
                return HeavyFreezingDrizzle;
            if (str.equals("FreezingDrizzle"))
                return FreezingDrizzle;
            if (str.equals("LightDrizzle"))
                return LightDrizzle;
            if (str.equals("PatchyLightDrizzle"))
                return PatchyLightDrizzle;
            if (str.equals("FreezingFog"))
                return FreezingFog;
            if (str.equals("Fog"))
                return Fog;
            if (str.equals("Blizzard"))
                return Blizzard;
            if (str.equals("BlowingSnow"))
                return BlowingSnow;
            if (str.equals("ThunderyOutbreaksNearby"))
                return ThunderyOutbreaksNearby;
            if (str.equals("PatchyFreezingDrizzleNearby"))
                return PatchyFreezingDrizzleNearby;
            if (str.equals("PatchySleet"))
                return PatchySleet;
            if (str.equals("PatchySnow"))
                return PatchySnow;
            if (str.equals("PatchyRain"))
                return PatchyRain;
            if (str.equals("Mist"))
                return Mist;
            if (str.equals("Overcast"))
                return Overcast;
            if (str.equals("Cloudy"))
                return Cloudy;
            if (str.equals("PartlyCloudy"))
                return PartlyCloudy;
            if (str.equals("ClearSunny"))
                return ClearSunny;
            return null;
        }
    }
    public enum DosageUnit{
        	Absolute(0),
        	ON10KgWight(1);
        
        private int code;
        
        DosageUnit(int code){
            this.code = code;
        }
        
        public int getCode(){
            return code;
        }
        
        public static DosageUnit fromString(String str)
        {
            if (str.equals("Absolute"))
                return Absolute;
            if (str.equals("ON10KgWight"))
                return ON10KgWight;
            return null;
        }
    }

    public enum WorkoutPlanSearchCriteriaGroup
    {
        Mine(0),
        Favorites(1),
        Other(2);

        private int code;

        WorkoutPlanSearchCriteriaGroup(int code){
            this.code = code;
        }

        public int getCode(){
            return code;
        }

        public static WorkoutPlanSearchCriteriaGroup fromString(String str)
        {
            if (str.equals("Mine"))
                return Mine;
            if (str.equals("Other"))
                return Other;
            if (str.equals("Favorites"))
                return Favorites;
            return null;
        }
    }

    public enum ExerciseSearchCriteriaGroup
    {
        Mine(0),
        Other(1),
        Favorites(2),
        Global(3) ;

        private int code;

        ExerciseSearchCriteriaGroup(int code){
            this.code = code;
        }

        public int getCode(){
            return code;
        }

        public static ExerciseSearchCriteriaGroup fromString(String str)
        {
            if (str.equals("Mine"))
                return Mine;
            if (str.equals("Other"))
                return Other;
            if (str.equals("Favorites"))
                return Favorites;
            if (str.equals("Global"))
                return Global;
            return null;
        }
    }
}
