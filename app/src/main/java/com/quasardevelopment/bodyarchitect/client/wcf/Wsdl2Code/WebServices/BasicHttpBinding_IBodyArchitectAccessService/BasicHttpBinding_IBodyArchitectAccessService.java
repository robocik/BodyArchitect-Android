package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.accounts.NetworkErrorException;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.util.Base64;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.quasardevelopment.bodyarchitect.client.model.Exceptions.*;
import com.quasardevelopment.bodyarchitect.client.model.GPSPoint;
import com.quasardevelopment.bodyarchitect.client.model.Settings;
import com.quasardevelopment.bodyarchitect.client.util.ApplicationState;
import com.quasardevelopment.bodyarchitect.client.util.Functions;
import com.quasardevelopment.bodyarchitect.client.wcf.*;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.AccountOperationType;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.FavoriteOperation;
import com.quasardevelopment.bodyarchitect.client.wcf.envelopes.BAService;
import com.quasardevelopment.bodyarchitect.client.wcf.envelopes.WcfResult;
import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.transport.Transport;
import org.kxml2.kdom.Element;
import org.kxml2.kdom.Node;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Type;
import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

public class BasicHttpBinding_IBodyArchitectAccessService {

    static final int NEVER_TIMEOUT=0;
    public String url= Settings.getEndPointUrl();
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    private volatile boolean isCanceled;

    public BasicHttpBinding_IBodyArchitectAccessService(){}

    public BasicHttpBinding_IBodyArchitectAccessService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public BasicHttpBinding_IBodyArchitectAccessService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public BasicHttpBinding_IBodyArchitectAccessService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    Transport currentTransport;

//    public static void Reset()
//    {
//        if(Constants.IsDebugMode)
//        {
//            currentTransport=null;
//        }
//    }

    private Transport createTransport(Integer operationTimeout)
    {
        if(operationTimeout==null)
        {
            operationTimeout=timeOut;
        }
        //if(currentTransport==null )
        {
            currentTransport= new BAHttpTransport(url,operationTimeout);
        }
        return currentTransport;
    }
    public void GPSCoordinatesOperationAsync(final UUID gpsTrackerEntryId,final WS_Enums.GPSCoordinatesOperationType operationType,final List<GPSPoint> coordinates) throws Exception{

        executeAsync(new Functions.IFunc<GPSTrackerEntryDTO>() {
            @Override
            public GPSTrackerEntryDTO Func() throws Exception {
                return GPSCoordinatesOperation(gpsTrackerEntryId,operationType,coordinates);
            }
        }, "GPSCoordinatesOperation") ;
    }


    public static byte[] compress(String str) throws IOException {

        ByteArrayOutputStream os = new ByteArrayOutputStream();
        ZipOutputStream gos = new ZipOutputStream(os);
        gos.setLevel(8);
        ZipEntry entry = new ZipEntry("zip");
        gos.putNextEntry(entry);
        gos.write(str.getBytes("UTF-8"));
        gos.closeEntry();
        gos.finish();
        gos.close();

        byte[] compressed = os.toByteArray();
        os.close();
        return compressed;
    }

    public static String decompress(byte[] compressed) throws IOException {
        final int BUFFER_SIZE = 32;
        ByteArrayInputStream is = new ByteArrayInputStream(compressed);
        ZipInputStream gis = new ZipInputStream(is);
        gis.getNextEntry();
        StringBuilder string = new StringBuilder();
        byte[] data = new byte[BUFFER_SIZE];
        int bytesRead;
        while ((bytesRead = gis.read(data)) != -1) {
            string.append(new String(data, 0, bytesRead));
        }
        gis.close();
        is.close();
        return string.toString();
    }

    public GPSTrackerEntryDTO GPSCoordinatesOperation(final UUID gpsTrackerEntryId,final WS_Enums.GPSCoordinatesOperationType operationType,final List<GPSPoint> coordinates) throws Exception {

        return (GPSTrackerEntryDTO)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() throws IOException {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                //soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"pictureInfo",new PictureInfoDTO().getClass());

                org.kxml2.kdom.Element[] standardHeaders=soapEnvelope.headerOut;
                soapEnvelope.headerOut=new org.kxml2.kdom.Element[4];
                soapEnvelope.headerOut[0]=standardHeaders[0];
                soapEnvelope.headerOut[1]=standardHeaders[1];

                org.kxml2.kdom.Element h = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"SessionId");
                h.addChild(org.kxml2.kdom.Node.TEXT, ApplicationState.getCurrent().getSessionData().token.sessionId);
                soapEnvelope.headerOut[2]=h;


                org.kxml2.kdom.Element params = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"Params");
                soapEnvelope.headerOut[3]=params;

                h = new org.kxml2.kdom.Element().createElement(WcfConstans.CollectionNamespace,"GPSTrackerEntryId");
                h.addChild(org.kxml2.kdom.Node.TEXT, gpsTrackerEntryId.toString());
                params.addChild(Node.ELEMENT,h);

                h = new org.kxml2.kdom.Element().createElement(WcfConstans.CollectionNamespace,"Operation");
                h.addChild(org.kxml2.kdom.Node.TEXT, operationType.toString());
                params.addChild(Node.ELEMENT,h);


                Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create();
                String json = gson.toJson(coordinates);
                byte[] zip=compress(json);
                String zipBasee64= Base64.encodeToString(zip, Base64.DEFAULT);

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GPSOperationParam");

                PropertyInfo info = new PropertyInfo();
                info.setName("CoordinatesStream");
                info.setType(PropertyInfo.STRING_CLASS);
                info.setNamespace(WcfConstans.Namespace);
                info.setValue(zipBasee64);
                soapReq.addProperty(info);

                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{

                SoapObject j = (SoapObject)result.getProperty("GPSTrackerEntry");
                ReferencesManager referencesTable= new ReferencesManager();
                GPSTrackerEntryDTO resultVariable =  new GPSTrackerEntryDTO (j,referencesTable);
                return resultVariable;
//                    return null;
            }
        },"GPSCoordinatesOperation");

//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","GPSCoordinatesOperation");
//        soapReq.addProperty("CoordinatesStream",coordinatesStream.toString());
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//
//        try{
//            httpTransport.call("http://MYBASERVICE.TK/GPSCoordinatesOperation", soapEnvelope);
//            Object retObj = soapEnvelope.bodyIn;
//            if (retObj instanceof SoapFault){
//                SoapFault fault = (SoapFault)retObj;
//                Exception ex = new Exception(fault.faultstring);
//                if (eventHandler != null)
//                    eventHandler.Wsdl2CodeFinishedWithException(ex);
//            }else{
//                SoapObject result=(SoapObject)retObj;
//                if (result.hasProperty("GPSCoordinatesOperationResult"))
//                {
//                    SoapObject j = (SoapObject)result.getProperty("GPSCoordinatesOperationResult");
//                    //todo:needs to be implemented
////                    GPSTrackerEntryDTO resultVariable =  new GPSTrackerEntryDTO (j);
////                    return resultVariable;
//                    return null;
//
//                }
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
//        return null;
    }


    public void ProfileOperationAsync(final ProfileOperationParam param) throws Exception{

        executeAsync(new Functions.IFunc<Void>() {
            @Override
            public Void Func() throws Exception {
                ProfileOperation( param);
                return null;
            }
        }, "ProfileOperation") ;
    }


    public void ProfileOperation(final ProfileOperationParam param) throws Exception {

        execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"ProfileOperation");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"param",new ProfileOperationParam().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return null;
            }
        },"ProfileOperation");
    }


    public void AccountOperationAsync(final String userNameOrEmail,final AccountOperationType operationType) throws Exception{

        executeAsync(new Functions.IFunc<Void>() {
            @Override
            public Void Func() throws Exception {
                AccountOperation(userNameOrEmail, operationType);
                return null;
            }
        }, "AccountOperation",true) ;
    }


    public void AccountOperation(final String userNameOrEmail,final AccountOperationType operationType) throws Exception {

        execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"AccountOperation");
                soapReq.addProperty("userNameOrEmail", userNameOrEmail);
                soapReq.addProperty("operationType",operationType.toString());
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return null;
            }
        },"AccountOperation");

    }


    public void UserFavoritesOperationAsync(final UserDTO userDto,final FavoriteOperation operation) throws Exception{

        executeAsync(new Functions.IFunc<Void>() {
            @Override
            public Void Func() throws Exception {
                UserFavoritesOperation(userDto, operation);
                return null;
            }
        }, "UserFavoritesOperation") ;
    }

    public void UserFavoritesOperation(final UserDTO userDto,final FavoriteOperation operation) throws Exception {
        execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"UserFavoritesOperation");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"userDto",new UserDTO().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("userDto",userDto);
                soapReq.addProperty("operation",operation.toString());
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return null;
            }
        },"UserFavoritesOperation");


//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","UserFavoritesOperation");
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","userDto",new UserDTO().getClass());
//        soapReq.addProperty("token",token);
//        soapReq.addProperty("userDto",userDto);
//        soapReq.addProperty("operation",operation.toString());
//        soapReq.addProperty("operationSpecified",operationSpecified);
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//        try{
//            if (headers!=null){
//                httpTransport.call("http://MYBASERVICE.TK/UserFavoritesOperation", soapEnvelope,headers);
//            }else{
//                httpTransport.call("http://MYBASERVICE.TK/UserFavoritesOperation", soapEnvelope);
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
    }


//    public void TrainingDayCommentOperationAsync(final Token token,final TrainingDayCommentOperationParam arg) throws Exception{
//
//        new AsyncTask<Void, Void, TrainingDayCommentDTO>(){
//            @Override
//            protected void onPreExecute() {
//                eventHandler.Wsdl2CodeStartedRequest();
//            };
//            @Override
//            protected TrainingDayCommentDTO doInBackground(Void... params) {
//                return TrainingDayCommentOperation(token, arg);
//            }
//            @Override
//            protected void onPostExecute(TrainingDayCommentDTO result)
//            {
//                eventHandler.Wsdl2CodeEndedRequest();
//                if (result != null){
//                    eventHandler.Wsdl2CodeFinished("TrainingDayCommentOperation", result);
//                }
//            }
//        }.execute();
//    }
//
//
//    public TrainingDayCommentDTO TrainingDayCommentOperation(Token token,TrainingDayCommentOperationParam arg){
//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","TrainingDayCommentOperation");
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","arg",new TrainingDayCommentOperationParam().getClass());
//        soapReq.addProperty("token",token);
//        soapReq.addProperty("arg",arg);
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//        try{
//            if (headers!=null){
//                httpTransport.call("http://MYBASERVICE.TK/TrainingDayCommentOperation", soapEnvelope,headers);
//            }else{
//                httpTransport.call("http://MYBASERVICE.TK/TrainingDayCommentOperation", soapEnvelope);
//            }
//            Object retObj = soapEnvelope.bodyIn;
//            if (retObj instanceof SoapFault){
//                SoapFault fault = (SoapFault)retObj;
//                Exception ex = new Exception(fault.faultstring);
//                if (eventHandler != null)
//                    eventHandler.Wsdl2CodeFinishedWithException(ex);
//            }else{
//                SoapObject result=(SoapObject)retObj;
//                if (result.hasProperty("TrainingDayCommentOperationResult"))
//                {
//                    SoapObject j = (SoapObject)result.getProperty("TrainingDayCommentOperationResult");
//                    TrainingDayCommentDTO resultVariable =  new TrainingDayCommentDTO (j);
//                    return resultVariable;
//
//                }
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
//        return null;
//    }


//    public void GetTrainingDayCommentsAsync(final Token token,final TrainingDayInfoDTO day,final PartialRetrievingInfo info) throws Exception{
//
//        new AsyncTask<Void, Void, PagedResultOfTrainingDayCommentDTO5oAtqRlh>(){
//            @Override
//            protected void onPreExecute() {
//                eventHandler.Wsdl2CodeStartedRequest();
//            };
//            @Override
//            protected PagedResultOfTrainingDayCommentDTO5oAtqRlh doInBackground(Void... params) {
//                return GetTrainingDayComments(token, day, info, headers);
//            }
//            @Override
//            protected void onPostExecute(PagedResultOfTrainingDayCommentDTO5oAtqRlh result)
//            {
//                eventHandler.Wsdl2CodeEndedRequest();
//                if (result != null){
//                    eventHandler.Wsdl2CodeFinished("GetTrainingDayComments", result);
//                }
//            }
//        }.execute();
//    }
//
//
//    public PagedResultOfTrainingDayCommentDTO5oAtqRlh GetTrainingDayComments(Token token,TrainingDayInfoDTO day,PartialRetrievingInfo info){
//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","GetTrainingDayComments");
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","day",new TrainingDayInfoDTO().getClass());
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","info",new PartialRetrievingInfo().getClass());
//        soapReq.addProperty("token",token);
//        soapReq.addProperty("day",day);
//        soapReq.addProperty("info",info);
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//        try{
//            httpTransport.call("http://MYBASERVICE.TK/GetTrainingDayComments", soapEnvelope);
//            Object retObj = soapEnvelope.bodyIn;
//            if (retObj instanceof SoapFault){
//                SoapFault fault = (SoapFault)retObj;
//                Exception ex = new Exception(fault.faultstring);
//                if (eventHandler != null)
//                    eventHandler.Wsdl2CodeFinishedWithException(ex);
//            }else{
//                SoapObject result=(SoapObject)retObj;
//                if (result.hasProperty("GetTrainingDayCommentsResult"))
//                {
//                    SoapObject j = (SoapObject)result.getProperty("GetTrainingDayCommentsResult");
//                    PagedResultOfTrainingDayCommentDTO5oAtqRlh resultVariable =  new PagedResultOfTrainingDayCommentDTO5oAtqRlh (j);
//                    return resultVariable;
//
//                }
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
//        return null;
//    }

    public void MessageOperationAsync(final Token token,final MessageOperationParam arg) throws Exception{

        executeAsync(new Functions.IFunc<Void>() {
            @Override
            public Void Func() throws Exception {
                MessageOperation(arg);
                return null;
            }
        }, "MessageOperation") ;
    }


    public void MessageOperation(final MessageOperationParam arg) throws Exception {
        execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"MessageOperation");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"arg",new MessageOperationParam().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("arg",arg);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return null;
            }
        },"MessageOperation");


//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","MessageOperation");
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","arg",new MessageOperationParam().getClass());
//        soapReq.addProperty("token",token);
//        soapReq.addProperty("arg",arg);
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//        try{
//            if (headers!=null){
//                httpTransport.call("http://MYBASERVICE.TK/MessageOperation", soapEnvelope,headers);
//            }else{
//                httpTransport.call("http://MYBASERVICE.TK/MessageOperation", soapEnvelope);
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
    }


    public void SendMessageAsync(final MessageDTO message) throws Exception{
        executeAsync(new Functions.IFunc<Void>() {
            @Override
            public Void Func() throws Exception {
                SendMessage( message);
                return null;
            }
        }, "SendMessage") ;
    }

    public void SendMessage(final MessageDTO message) throws Exception {
        execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"SendMessage");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"message",new MessageDTO().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("message",message);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return null;
            }
        },"SendMessage");
    }

    public void GetProfileInformationAsync(final GetProfileInformationCriteria criteria) {

        executeAsync(new Functions.IFunc<ProfileInformationDTO>() {
            @Override
            public ProfileInformationDTO Func() throws Exception {
                return GetProfileInformation(criteria);
            }
        }, "GetProfileInformation") ;

    }

    public ProfileInformationDTO GetProfileInformation(final GetProfileInformationCriteria criteria) throws Exception {

        return (ProfileInformationDTO)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetProfileInformation");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"criteria",new GetProfileInformationCriteria().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("criteria",criteria);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(ProfileInformationDTO.class,result,"GetProfileInformationResult");
            }
        },"GetProfileInformation");
    }

    Object getResult(Class destObj,SoapObject source,String resultName) throws Exception {
        if (source.hasProperty(resultName))
        {
            Object obj=source.getProperty(resultName);
            if(obj==null)
            {
                return null;
            }
            if ( obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                return j;
            }
            SoapObject j = (SoapObject)obj;

            ReferencesManager referencesTable= new ReferencesManager();
            Constructor ctor = destObj.getConstructor(SoapObject.class,ReferencesManager.class);
            Object instance = ctor.newInstance(j,referencesTable);

            return instance;
        }

        return null;
    }


    public void InviteFriendOperationAsync(final InviteFriendOperationData data) throws Exception{
        executeAsync(new Functions.IFunc<FriendInvitationDTO>() {
            @Override
            public FriendInvitationDTO Func() throws Exception {
                return InviteFriendOperation(data);
            }
        }, "InviteFriendOperation") ;

//        new AsyncTask<Void, Void, FriendInvitationDTO>(){
//            @Override
//            protected void onPreExecute() {
//                eventHandler.Wsdl2CodeStartedRequest();
//            };
//            @Override
//            protected FriendInvitationDTO doInBackground(Void... params) {
//                return InviteFriendOperation(token, data);
//            }
//            @Override
//            protected void onPostExecute(FriendInvitationDTO result)
//            {
//                eventHandler.Wsdl2CodeEndedRequest();
//                if (result != null){
//                    eventHandler.Wsdl2CodeFinished("InviteFriendOperation", result);
//                }
//            }
//        }.execute();
    }

    public FriendInvitationDTO InviteFriendOperation(final InviteFriendOperationData data) throws Exception {

        return (FriendInvitationDTO)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"InviteFriendOperation");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"data",new InviteFriendOperationData().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("data",data);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(FriendInvitationDTO.class,result,"InviteFriendOperationResult");
            }
        },"InviteFriendOperation");

//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","InviteFriendOperation");
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","data",new InviteFriendOperationData().getClass());
//        soapReq.addProperty("token",token);
//        soapReq.addProperty("data",data);
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//        try{
//            if (headers!=null){
//                httpTransport.call("http://MYBASERVICE.TK/InviteFriendOperation", soapEnvelope,headers);
//            }else{
//                httpTransport.call("http://MYBASERVICE.TK/InviteFriendOperation", soapEnvelope);
//            }
//            Object retObj = soapEnvelope.bodyIn;
//            if (retObj instanceof SoapFault){
//                SoapFault fault = (SoapFault)retObj;
//                Exception ex = new Exception(fault.faultstring);
//                if (eventHandler != null)
//                    eventHandler.Wsdl2CodeFinishedWithException(ex);
//            }else{
//                SoapObject result=(SoapObject)retObj;
//                if (result.hasProperty("InviteFriendOperationResult"))
//                {
//                    SoapObject j = (SoapObject)result.getProperty("InviteFriendOperationResult");
//                    FriendInvitationDTO resultVariable =  new FriendInvitationDTO (j);
//                    return resultVariable;
//
//                }
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
//        return null;
    }



    public void LoginAsync(final ClientInformation clientInfo,final String username,final String password) throws Exception{

        executeAsync(new Functions.IFunc<SessionData>() {
            @Override
            public SessionData Func() throws Exception {
                return Login(clientInfo, username, password);
            }
        }, "Login",true) ;

    }


    public SessionData Login(final ClientInformation clientInfo,final String username,final String password) throws Exception{

        return (SessionData)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"Login");
                soapEnvelope.addMapping(WcfConstans.Namespace,"clientInfo",new ClientInformation().getClass());
                soapReq.addProperty("clientInfo",clientInfo);
                soapReq.addProperty("username",username);
                soapReq.addProperty("password",password);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(SessionData.class,result,"LoginResult");
            }
        },"Login");
    }


    public void LogoutAsync(){

        //we must store token in local variable because logout method is done async and first ApplicationState will be set to null
        final Token token=ApplicationState.getCurrent().getSessionData().token;
        executeAsync(new Functions.IFunc<Object>() {
            @Override
            public Object Func() throws Exception {
                Logout(token);
                return null;
            }
        }, "Logout") ;
    }

    public void Logout(Token token) throws Exception{
        SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
        SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"Logout");
        soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
        soapReq.addProperty("token",token);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        httpTransport.call(WcfConstans.ServiceNamespace +"Logout", soapEnvelope);
    }


    public void CreateProfileAsync(final ClientInformation clientInfo,final ProfileDTO newProfile) throws Exception{

        executeAsync(new Functions.IFunc<SessionData>() {
            @Override
            public SessionData Func() throws Exception {
                return CreateProfile(clientInfo, newProfile);
            }
        }, "CreateProfile",true) ;
    }

    public SessionData CreateProfile(final ClientInformation clientInfo,final ProfileDTO newProfile) throws Exception {
        return (SessionData)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"CreateProfile");
                soapEnvelope.addMapping(WcfConstans.Namespace,"clientInfo",new ClientInformation().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"newProfile",new ProfileDTO().getClass());
                soapReq.addProperty("clientInfo",clientInfo);
                soapReq.addProperty("newProfile",newProfile);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(SessionData.class,result,"CreateProfileResult");
            }
        },"CreateProfile");


//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","CreateProfile");
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","clientInfo",new ClientInformation().getClass());
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","newProfile",new ProfileDTO().getClass());
//        soapReq.addProperty("clientInfo",clientInfo);
//        soapReq.addProperty("newProfile",newProfile);
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//        try{
//            if (headers!=null){
//                httpTransport.call("http://MYBASERVICE.TK/CreateProfile", soapEnvelope,headers);
//            }else{
//                httpTransport.call("http://MYBASERVICE.TK/CreateProfile", soapEnvelope);
//            }
//            Object retObj = soapEnvelope.bodyIn;
//            if (retObj instanceof SoapFault){
//                SoapFault fault = (SoapFault)retObj;
//                Exception ex = new Exception(fault.faultstring);
//                if (eventHandler != null)
//                    eventHandler.Wsdl2CodeFinishedWithException(ex);
//            }else{
//                SoapObject result=(SoapObject)retObj;
//                return (SessionData)getResult(SessionData.class,result,"CreateProfileResult");
////                if (result.hasProperty("CreateProfileResult"))
////                {
////                    SoapObject j = (SoapObject)result.getProperty("CreateProfileResult");
////                    SessionData resultVariable =  new SessionData (j);
////                    return resultVariable;
////
////                }
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
//        return null;
    }


    public void UpdateProfileAsync(final ProfileUpdateData data) throws Exception{

        executeAsync(new Functions.IFunc<ProfileDTO>() {
            @Override
            public ProfileDTO Func() throws Exception {
                return UpdateProfile(data);
            }
        }, "UpdateProfile") ;
    }


    public ProfileDTO UpdateProfile(final ProfileUpdateData data) throws Exception {

        return (ProfileDTO)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"UpdateProfile");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"data",new ProfileUpdateData().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("data",data);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(ProfileDTO.class,result,"UpdateProfileResult");
            }
        },"UpdateProfile",null);


//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","UpdateProfile");
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","data",new ProfileUpdateData().getClass());
//        soapReq.addProperty("token",token);
//        soapReq.addProperty("data",data);
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//        try{
//            if (headers!=null){
//                httpTransport.call("http://MYBASERVICE.TK/UpdateProfile", soapEnvelope,headers);
//            }else{
//                httpTransport.call("http://MYBASERVICE.TK/UpdateProfile", soapEnvelope);
//            }
//            Object retObj = soapEnvelope.bodyIn;
//            if (retObj instanceof SoapFault){
//                SoapFault fault = (SoapFault)retObj;
//                Exception ex = new Exception(fault.faultstring);
//                if (eventHandler != null)
//                    eventHandler.Wsdl2CodeFinishedWithException(ex);
//            }else{
//                SoapObject result=(SoapObject)retObj;
//                if (result.hasProperty("UpdateProfileResult"))
//                {
//                    SoapObject j = (SoapObject)result.getProperty("UpdateProfileResult");
//                    ProfileDTO resultVariable =  new ProfileDTO (j);
//                    return resultVariable;
//
//                }
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
//        return null;
    }

//    public void DeleteTrainingDayAsync(Token token,DeleteTrainingDayParam dayDto) throws Exception{
//        if (this.eventHandler == null)
//            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
//        DeleteTrainingDayAsync(token, dayDto, null);
//    }
//
//    public void DeleteTrainingDayAsync(final Token token,final DeleteTrainingDayParam dayDto,final List<HeaderProperty> headers) throws Exception{
//
//        new AsyncTask<Void, Void, Void>(){
//            @Override
//            protected void onPreExecute() {
//                eventHandler.Wsdl2CodeStartedRequest();
//            };
//            @Override
//            protected Void doInBackground(Void... params) {
//                DeleteTrainingDay(token, dayDto, headers);
//                return null;
//            }
//            @Override
//            protected void onPostExecute(Void result)
//            {
//                eventHandler.Wsdl2CodeEndedRequest();
//                if (result != null){
//                    eventHandler.Wsdl2CodeFinished("DeleteTrainingDay", result);
//                }
//            }
//        }.execute();
//    }
//
//    public void DeleteTrainingDay(Token token,DeleteTrainingDayParam dayDto){
//        DeleteTrainingDay(token, dayDto, null);
//    }
//
//    public void DeleteTrainingDay(Token token,DeleteTrainingDayParam dayDto,List<HeaderProperty> headers){
//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","DeleteTrainingDay");
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
//        soapEnvelope.addMapping("http://MYBASERVICE.TK/","dayDto",new DeleteTrainingDayParam().getClass());
//        soapReq.addProperty("token",token);
//        soapReq.addProperty("dayDto",dayDto);
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//        try{
//            if (headers!=null){
//                httpTransport.call("http://MYBASERVICE.TK/DeleteTrainingDay", soapEnvelope,headers);
//            }else{
//                httpTransport.call("http://MYBASERVICE.TK/DeleteTrainingDay", soapEnvelope);
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
//    }


    public void UploadImageAsync(final PictureInfoDTO pictureInfo,final Bitmap image) throws Exception{

        executeAsync(new Functions.IFunc<PictureInfoDTO>() {
            @Override
            public PictureInfoDTO Func() throws Exception {
                return UploadImage(pictureInfo, image);
            }
        }, "UploadImage") ;
    }


    private String processBitmap(Bitmap bmp)
    {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        bmp.compress(Bitmap.CompressFormat.PNG, 100, stream);
        byte[] byteArray = stream.toByteArray();
        return Base64.encodeToString(byteArray, Base64.DEFAULT);
    }
    public PictureInfoDTO UploadImage(final PictureInfoDTO pictureInfo,final Bitmap image) throws Exception {

        return (PictureInfoDTO)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                //soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"pictureInfo",new PictureInfoDTO().getClass());

                org.kxml2.kdom.Element[] standardHeaders=soapEnvelope.headerOut;
                soapEnvelope.headerOut=new org.kxml2.kdom.Element[5];
                soapEnvelope.headerOut[0]=standardHeaders[0];
                soapEnvelope.headerOut[1]=standardHeaders[1];

                org.kxml2.kdom.Element h = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"SessionId");
                h.addChild(org.kxml2.kdom.Node.TEXT, ApplicationState.getCurrent().getSessionData().token.sessionId);
                soapEnvelope.headerOut[2]=h;
                h = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"PictureId");
                h.addChild(org.kxml2.kdom.Node.TEXT, pictureInfo.pictureId.toString());
                soapEnvelope.headerOut[3]=h;
                h = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"Hash");
                h.addChild(org.kxml2.kdom.Node.TEXT, pictureInfo.hash);
                soapEnvelope.headerOut[4]=h;


                String imageStr=processBitmap(image);
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"PictureDTO");

                PropertyInfo info = new PropertyInfo();
                info.setName("ImageStream");
                info.setType(PropertyInfo.STRING_CLASS);
                info.setNamespace(WcfConstans.Namespace);
                info.setValue(imageStr);
                soapReq.addProperty(info);

                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{

                PictureInfoDTO info = new PictureInfoDTO();
                for(Element headerItem:envelope.headerIn)
                {
                    if(headerItem.getName().equals("Hash"))
                    {
                        info.hash=headerItem.getText(0);
                    }
                    if(headerItem.getName().equals("PictureId"))
                    {
                        info.pictureId=UUID.fromString(headerItem.getText(0));
                    }
                }
                return info;
            }
        },"UploadImage");



//        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
//        soapEnvelope.implicitTypes = true;
//        soapEnvelope.dotNet = true;
//        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","UploadImage");
//        soapReq.addProperty("ImageStream",imageStream.toString());
//        soapEnvelope.setOutputSoapObject(soapReq);
//        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
//        try{
//            if (headers!=null){
//                httpTransport.call("http://MYBASERVICE.TK/UploadImage", soapEnvelope,headers);
//            }else{
//                httpTransport.call("http://MYBASERVICE.TK/UploadImage", soapEnvelope);
//            }
//        }catch (Exception e) {
//            if (eventHandler != null)
//                eventHandler.Wsdl2CodeFinishedWithException(e);
//            e.printStackTrace();
//        }
    }


    public void CheckProfileNameAvailabilityAsync(final String userName) throws Exception{

        executeAsync(new Functions.IFunc<Boolean>() {
            @Override
            public Boolean Func() throws Exception {
                return CheckProfileNameAvailability(userName);
            }
        }, "CheckProfileNameAvailability",true) ;

//        new AsyncTask<Void, Void, Void>(){
//            @Override
//            protected void onPreExecute() {
//                eventHandler.Wsdl2CodeStartedRequest();
//            };
//            @Override
//            protected Void doInBackground(Void... params) {
//                CheckProfileNameAvailability(userName, headers);
//                return null;
//            }
//            @Override
//            protected void onPostExecute(Void result)
//            {
//                eventHandler.Wsdl2CodeEndedRequest();
//                if (result != null){
//                    eventHandler.Wsdl2CodeFinished("CheckProfileNameAvailability", result);
//                }
//            }
//        }.execute();
    }


    public Boolean CheckProfileNameAvailability(final String userName) throws Exception {
        return (Boolean)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"CheckProfileNameAvailability");
                soapReq.addProperty("userName",userName);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return Boolean.parseBoolean(result.getPropertyAsString("CheckProfileNameAvailabilityResult"));
            }
        },"CheckProfileNameAvailability");
    }

    public void SaveTrainingDayAsync(final TrainingDayDTO day) throws Exception{

        executeAsync(new Functions.IFunc<SaveTrainingDayResult>() {
            @Override
            public SaveTrainingDayResult Func() throws Exception {
                return SaveTrainingDay( day);
            }
        }, "SaveTrainingDay") ;
    }

    public SaveTrainingDayResult SaveTrainingDay(final TrainingDayDTO day) throws Exception {

        return (SaveTrainingDayResult)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"SaveTrainingDay");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"day",new TrainingDayDTO().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("day",day);

                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return getResult(SaveTrainingDayResult.class,result,"SaveTrainingDayResult");
            }
        },"SaveTrainingDay",null);

    }

    public void GetTrainingDaysAsync(final WorkoutDaysSearchCriteria searchCriteria,final PartialRetrievingInfo retrievingInfo) throws Exception{

        executeAsync(new Functions.IFunc<PagedResultOfTrainingDayDTO5oAtqRlh>() {
            @Override
            public PagedResultOfTrainingDayDTO5oAtqRlh Func() throws Exception {
                return GetTrainingDays( searchCriteria, retrievingInfo);
            }
        }, "GetTrainingDays") ;
    }

    Object execute(IWcfMethod wcfMethod,String methodName) throws Exception
    {
        return execute(wcfMethod, methodName,null);
    }


    Object execute(IWcfMethod wcfMethod,String methodName,Integer operationTimeout) throws Exception
    {

        if(!WcfConstans.CheckConnection())
        {
            throw new NetworkErrorException();

        }
        if(ApplicationState.getCurrent()!=null)
        {
            if(ApplicationState.getCurrent().isOffline)
            {
                throw new NetworkErrorException();
            }
            ApplicationState.getCurrent().getSessionData().token.language=WcfConstans.getCurrentServiceLanguage();
        }
        boolean retry=true;

        if(operationTimeout==null)
        {
            operationTimeout=timeOut;
        }

        do
        {
            Transport httpTransport=createTransport(operationTimeout);
            SoapSerializationEnvelope envelope=wcfMethod.CreateSoapEnvelope();
            httpTransport.call(WcfConstans.ServiceNamespace + methodName, envelope);
            Object retObj = envelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = convertToException(fault);

                if(ex instanceof BAAuthenticationException)
                {
                    if (retry)
                    {
                        SessionData sessionData=Login(BAService.CreateClientInformation(), ApplicationState.getCurrent().getTempUserName(),ApplicationState.getCurrent().getTempPassword());

                        if(sessionData!=null)
                        {
                            ApplicationState.getCurrent().setSessionData(sessionData);
                            retry = false;
                            continue;
                        }

                    }

                }

                throw ex;
            }else{
                SoapObject result=(SoapObject)retObj;
                return wcfMethod.ProcessResult(envelope,result);
            }
        }while(true);

    }

    public PagedResultOfTrainingDayDTO5oAtqRlh GetTrainingDays(final WorkoutDaysSearchCriteria searchCriteria,final PartialRetrievingInfo retrievingInfo ) throws Exception {


        return (PagedResultOfTrainingDayDTO5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetTrainingDays");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"searchCriteria",new WorkoutDaysSearchCriteria().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"retrievingInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("searchCriteria",searchCriteria);
                soapReq.addProperty("retrievingInfo",retrievingInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return getResult(PagedResultOfTrainingDayDTO5oAtqRlh.class,result,"GetTrainingDaysResult");
            }
        },"GetTrainingDays");
    }

    Exception convertToException(SoapFault fault)
    {
        Element detailsNode=(Element)fault.detail.getChild(0);
        Element exceptionNode= (Element) detailsNode.getChild(0);
        //Element message=exceptionNode.getElement(WcfConstans.ServiceNamespace,"Message");
        String name=exceptionNode.getName();

        if(name.equals("BAAuthenticationException"))
        {
            return new BAAuthenticationException(fault.faultstring);
        }
        else if(name.equals("ValidationFault"))
        {   //todo:fill validation results
            return new ValidationException(fault.faultstring);
        }
        else if(name.equals("BAServiceException"))
        {
            //String errorCode=detailsNode.getElement(WcfConstans.ServiceNamespace,"ErrorCode").getName();
            String errorCode=exceptionNode.getElement(WcfConstans.ServiceNamespace,"ErrorCode").getChild(0).toString();
            if(errorCode.equals("LicenceException"))
            {
                return new LicenceException(fault.faultstring);
            }
            if(errorCode.equals("OldDataException"))
            {
                return new OldDataException(fault.faultstring);
            }
            if(errorCode.equals("UniqueException"))
            {
                return new UniqueException(fault.faultstring);
            }
            if(errorCode.equals("ObjectNotFound"))
            {
                return new ObjectNotFoundException(fault.faultstring);
            }
            if(errorCode.equals("ConsistencyException"))
            {
                return new ConsistencyException(fault.faultstring);
            }
        }

        return new Exception(fault.faultstring);
    }

    private <T> void  executeAsync(final Functions.IFunc<T> func,final String methodName)
    {
        executeAsync(func, methodName,false);
    }

    public <T> void  executeAsync(final Functions.IFunc<T> func,final String methodName,final boolean skipApplicationContextCheck)
    {
        //this is for checking if user has relog (or simply logout) in this case we shouldn't invoke any callbacks because there is a big chance for exception in UI
        final ApplicationState currentState=ApplicationState.getCurrent();
        new AsyncTask<Void, Void, WcfResult<T>>(){
            @Override
            protected void onPreExecute() {
                if(skipApplicationContextCheck || (ApplicationState.getCurrent()!=null && ApplicationState.getCurrent()==currentState))
                {
                    eventHandler.Wsdl2CodeStartedRequest();
                }
            };
            @Override
            protected WcfResult<T> doInBackground(Void... params) {
                WcfResult<T> result = new WcfResult<T>();
                try
                {
                    result.Result= func.Func();
                }
                catch(Exception ex)
                {
                    ex.printStackTrace();
                    result.Exception=ex;
                }
                return result;

            }
            @Override
            protected void onPostExecute(WcfResult<T> result)
            {

                if(isCanceled || (!skipApplicationContextCheck && ApplicationState.getCurrent()==null || ApplicationState.getCurrent()!=currentState))
                {
                    return;
                }
                eventHandler.Wsdl2CodeEndedRequest();
                if (result.Exception != null){
                    eventHandler.Wsdl2CodeFinishedWithException(result.Exception);
                }
                else
                {
                    eventHandler.Wsdl2CodeFinished(methodName, result.Result);

                }
            }
        }.execute();
    }
    public void GetTrainingDayAsync(final WorkoutDayGetOperation operationParams,final RetrievingInfo retrievingInfo) throws Exception{


        executeAsync(new Functions.IFunc<TrainingDayDTO>() {
            @Override
            public TrainingDayDTO Func() throws Exception {
                return GetTrainingDay(operationParams, retrievingInfo);
            }
        }, "GetTrainingDay") ;
    }


    public TrainingDayDTO GetTrainingDay(final WorkoutDayGetOperation operationParams,final RetrievingInfo retrievingInfo) throws Exception {

        return (TrainingDayDTO)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetTrainingDay");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"operationParams",new WorkoutDayGetOperation().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"retrievingInfo",new RetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("operationParams",operationParams);
                soapReq.addProperty("retrievingInfo",retrievingInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return getResult(TrainingDayDTO.class,result,"GetTrainingDayResult");
            }
        },"GetTrainingDay");

    }


    public void GetImageAsync(final PictureInfoDTO pictureInfo) throws Exception{

        executeAsync(new Functions.IFunc<Bitmap>() {
            @Override
            public Bitmap Func() throws Exception {
                return GetImage(pictureInfo);
            }
        }, "GetImage") ;
    }


    public Bitmap GetImage(final PictureInfoDTO pictureInfo) throws Exception {

        return (Bitmap)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                //soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"pictureInfo",new PictureInfoDTO().getClass());


//                org.kxml2.kdom.Element[] standardHeaders=soapEnvelope.headerOut;
//                soapEnvelope.headerOut=new org.kxml2.kdom.Element[5];
//                soapEnvelope.headerOut[0]=standardHeaders[0];
//                soapEnvelope.headerOut[1]=standardHeaders[1];

                ArrayList<org.kxml2.kdom.Element> headers = new ArrayList<Element>(Arrays.asList(soapEnvelope.headerOut));

                org.kxml2.kdom.Element h = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"SessionId");
                h.addChild(org.kxml2.kdom.Node.TEXT, ApplicationState.getCurrent().getSessionData().token.sessionId);
                headers.add(h);
                h = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"PictureId");
                h.addChild(org.kxml2.kdom.Node.TEXT, pictureInfo.pictureId.toString());
                headers.add(h);

                h = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"Hash");
                h.addChild(org.kxml2.kdom.Node.TEXT, pictureInfo.hash);
                headers.add(h);



//                soapEnvelope.headerOut=new org.kxml2.kdom.Element[headers.size()];
                soapEnvelope.headerOut=headers.toArray(soapEnvelope.headerOut);
//
//                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"PictureInfoDTO");
//                soapReq.addProperty("pictureInfo",pictureInfo);
                //soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                String rawImage = result.getProperty("ImageStream").toString();
                byte[] a = Base64.decode(rawImage, Base64.DEFAULT);
                return BitmapFactory.decodeByteArray(a, 0, a.length);
            }
        },"GetImage");
    }


    public void GetExercisesAsync(final ExerciseSearchCriteria searchCriteria,final PartialRetrievingInfo retrievingInfo) throws Exception{

        executeAsync(new Functions.IFunc<PagedResultOfExerciseDTO5oAtqRlh>() {
            @Override
            public PagedResultOfExerciseDTO5oAtqRlh Func() throws Exception {
                return GetExercises( searchCriteria, retrievingInfo);
            }
        }, "GetExercises") ;
    }


    public PagedResultOfExerciseDTO5oAtqRlh GetExercises(final ExerciseSearchCriteria searchCriteria,final PartialRetrievingInfo retrievingInfo) throws Exception {

        return (PagedResultOfExerciseDTO5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetExercises");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"searchCriteria",new ExerciseSearchCriteria().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"retrievingInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("searchCriteria",searchCriteria);
                soapReq.addProperty("retrievingInfo",retrievingInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return getResult(PagedResultOfExerciseDTO5oAtqRlh.class,result,"GetExercisesResult");
            }
        },"GetExercises");
    }


    public void GetSuplementsAsync(final GetSupplementsParam param,final PartialRetrievingInfo retrievingInfo) throws Exception{

        executeAsync(new Functions.IFunc<PagedResultOfSuplementDTO5oAtqRlh>() {
            @Override
            public PagedResultOfSuplementDTO5oAtqRlh Func() throws Exception {
                return GetSuplements(param, retrievingInfo);
            }
        }, "GetSuplements") ;

    }


    public PagedResultOfSuplementDTO5oAtqRlh GetSuplements(final GetSupplementsParam param,final PartialRetrievingInfo retrievingInfo) throws Exception {

        return (PagedResultOfSuplementDTO5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetSuplements");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"param",new GetSupplementsParam().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"retrievingInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapReq.addProperty("retrievingInfo",retrievingInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return getResult(PagedResultOfSuplementDTO5oAtqRlh.class,result,"GetSuplementsResult");
            }
        },"GetSuplements");

    }

    public void GetWorkoutPlansAsync(final WorkoutPlanSearchCriteria searchCriteria,final PartialRetrievingInfo pagerInfo) throws Exception{
        executeAsync(new Functions.IFunc<PagedResultOfTrainingPlan5oAtqRlh>() {
            @Override
            public PagedResultOfTrainingPlan5oAtqRlh Func() throws Exception {
                return GetWorkoutPlans(searchCriteria, pagerInfo);
            }
        }, "GetWorkoutPlans") ;
    }


    public PagedResultOfTrainingPlan5oAtqRlh GetWorkoutPlans(final WorkoutPlanSearchCriteria searchCriteria,final PartialRetrievingInfo pagerInfo) throws Exception {

        return (PagedResultOfTrainingPlan5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetWorkoutPlans");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"searchCriteria",new WorkoutPlanSearchCriteria().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"pagerInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("searchCriteria",searchCriteria);
                soapReq.addProperty("pagerInfo",pagerInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return getResult(PagedResultOfTrainingPlan5oAtqRlh.class,result,"GetWorkoutPlansResult");
            }
        },"GetWorkoutPlans");
    }



    public void GetCommentsAsync(final UUID globalId,final PartialRetrievingInfo retrievingInfo) throws Exception{

        executeAsync(new Functions.IFunc<PagedResultOfCommentEntryDTO5oAtqRlh>() {
            @Override
            public PagedResultOfCommentEntryDTO5oAtqRlh Func() throws Exception {
                return GetComments(globalId, retrievingInfo);
            }
        }, "GetComments") ;

    }

    public PagedResultOfCommentEntryDTO5oAtqRlh GetComments(final UUID globalId,final PartialRetrievingInfo retrievingInfo) throws Exception {


        return (PagedResultOfCommentEntryDTO5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetComments");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"retrievingInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("globalId",globalId);
                soapReq.addProperty("retrievingInfo",retrievingInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(PagedResultOfCommentEntryDTO5oAtqRlh.class,result,"GetCommentsResult");
            }
        },"GetComments");

    }



    public void WorkoutPlanOperationAsync(final WorkoutPlanOperationParam param) throws Exception{
        executeAsync(new Functions.IFunc<TrainingPlan>() {
            @Override
            public TrainingPlan Func() throws Exception {
                return WorkoutPlanOperation(param);
            }
        }, "WorkoutPlanOperation") ;

    }


    public TrainingPlan WorkoutPlanOperation(final WorkoutPlanOperationParam param) throws Exception {

        return (TrainingPlan)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"WorkoutPlanOperation");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"param",new WorkoutPlanOperationParam().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return null;
            }
        },"WorkoutPlanOperation");

    }


    public void GetUsersAsync(final UserSearchCriteria searchCriteria,final PartialRetrievingInfo pagerInfo) throws Exception{

        executeAsync(new Functions.IFunc<PagedResultOfUserSearchDTO5oAtqRlh>() {
            @Override
            public PagedResultOfUserSearchDTO5oAtqRlh Func() throws Exception {
                return GetUsers(searchCriteria, pagerInfo);
            }
        }, "GetUsers") ;
    }


    public PagedResultOfUserSearchDTO5oAtqRlh GetUsers(final UserSearchCriteria searchCriteria,final PartialRetrievingInfo pagerInfo) throws Exception {
        return (PagedResultOfUserSearchDTO5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetUsers");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"searchCriteria",new UserSearchCriteria().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"pagerInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("searchCriteria",searchCriteria);
                soapReq.addProperty("pagerInfo",pagerInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return getResult(PagedResultOfUserSearchDTO5oAtqRlh.class,result,"GetUsersResult");
            }
        },"GetUsers");

    }

    public void WP7RegisterAsync(String deviceid,String uri,String profileId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        WP7RegisterAsync(deviceid, uri, profileId, null);
    }

    public void WP7RegisterAsync(final String deviceid,final String uri,final String profileId,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return WP7Register(deviceid, uri, profileId, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("WP7Register", result);
                }
            }
        }.execute();
    }

    public String WP7Register(String deviceid,String uri,String profileId){
        return WP7Register(deviceid, uri, profileId, null);
    }

    public String WP7Register(String deviceid,String uri,String profileId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","WP7Register");
        soapReq.addProperty("deviceid",deviceid);
        soapReq.addProperty("uri",uri);
        soapReq.addProperty("profileId",profileId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/WP7Register", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/WP7Register", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("WP7RegisterResult"))
                {
                    Object obj = result.getProperty("WP7RegisterResult");
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) result.getProperty("WP7RegisterResult");
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) result.getProperty("WP7RegisterResult");
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void WP7UnregisterAsync(String deviceid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        WP7UnregisterAsync(deviceid, null);
    }

    public void WP7UnregisterAsync(final String deviceid,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                WP7Unregister(deviceid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("WP7Unregister", result);
                }
            }
        }.execute();
    }

    public void WP7Unregister(String deviceid){
        WP7Unregister(deviceid, null);
    }

    public void WP7Unregister(String deviceid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","WP7Unregister");
        soapReq.addProperty("deviceid",deviceid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/WP7Unregister", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/WP7Unregister", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

    public void WP7ClearCounterAsync(String deviceid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        WP7ClearCounterAsync(deviceid, null);
    }

    public void WP7ClearCounterAsync(final String deviceid,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                WP7ClearCounter(deviceid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("WP7ClearCounter", result);
                }
            }
        }.execute();
    }

    public void WP7ClearCounter(String deviceid){
        WP7ClearCounter(deviceid, null);
    }

    public void WP7ClearCounter(String deviceid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","WP7ClearCounter");
        soapReq.addProperty("deviceid",deviceid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/WP7ClearCounter", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/WP7ClearCounter", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

    public void WP7TrialStatusAsync(String deviceId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        WP7TrialStatusAsync(deviceId, null);
    }

    public void WP7TrialStatusAsync(final String deviceId,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, TrialStatusInfo>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected TrialStatusInfo doInBackground(Void... params) {
                return WP7TrialStatus(deviceId, headers);
            }
            @Override
            protected void onPostExecute(TrialStatusInfo result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("WP7TrialStatus", result);
                }
            }
        }.execute();
    }

    public TrialStatusInfo WP7TrialStatus(String deviceId){
        return WP7TrialStatus(deviceId, null);
    }

    public TrialStatusInfo WP7TrialStatus(String deviceId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","WP7TrialStatus");
        soapReq.addProperty("deviceId",deviceId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/WP7TrialStatus", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/WP7TrialStatus", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("WP7TrialStatusResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("WP7TrialStatusResult");
                    TrialStatusInfo resultVariable =  new TrialStatusInfo (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetActivitiesAsync(Token token,PartialRetrievingInfo retrievingInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetActivitiesAsync(token, retrievingInfo, null);
    }

    public void GetActivitiesAsync(final Token token,final PartialRetrievingInfo retrievingInfo,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, PagedResultOfActivityDTO5oAtqRlh>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PagedResultOfActivityDTO5oAtqRlh doInBackground(Void... params) {
                return GetActivities(token, retrievingInfo, headers);
            }
            @Override
            protected void onPostExecute(PagedResultOfActivityDTO5oAtqRlh result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetActivities", result);
                }
            }
        }.execute();
    }

    public PagedResultOfActivityDTO5oAtqRlh GetActivities(Token token,PartialRetrievingInfo retrievingInfo){
        return GetActivities(token, retrievingInfo, null);
    }

    public PagedResultOfActivityDTO5oAtqRlh GetActivities(Token token,PartialRetrievingInfo retrievingInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","GetActivities");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","retrievingInfo",new PartialRetrievingInfo().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("retrievingInfo",retrievingInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/GetActivities", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/GetActivities", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("GetActivitiesResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("GetActivitiesResult");
                    PagedResultOfActivityDTO5oAtqRlh resultVariable =  new PagedResultOfActivityDTO5oAtqRlh (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void DeleteActivityAsync(Token token,ActivityDTO activity) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteActivityAsync(token, activity, null);
    }

    public void DeleteActivityAsync(final Token token,final ActivityDTO activity,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                DeleteActivity(token, activity, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DeleteActivity", result);
                }
            }
        }.execute();
    }

    public void DeleteActivity(Token token,ActivityDTO activity){
        DeleteActivity(token, activity, null);
    }

    public void DeleteActivity(Token token,ActivityDTO activity,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","DeleteActivity");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","activity",new ActivityDTO().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("activity",activity);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/DeleteActivity", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/DeleteActivity", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

    public void SaveActivityAsync(Token token,ActivityDTO activity) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveActivityAsync(token, activity, null);
    }

    public void SaveActivityAsync(final Token token,final ActivityDTO activity,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, ActivityDTO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ActivityDTO doInBackground(Void... params) {
                return SaveActivity(token, activity, headers);
            }
            @Override
            protected void onPostExecute(ActivityDTO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveActivity", result);
                }
            }
        }.execute();
    }

    public ActivityDTO SaveActivity(Token token,ActivityDTO activity){
        return SaveActivity(token, activity, null);
    }

    public ActivityDTO SaveActivity(Token token,ActivityDTO activity,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","SaveActivity");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","activity",new ActivityDTO().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("activity",activity);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/SaveActivity", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/SaveActivity", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("SaveActivityResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("SaveActivityResult");
                    ActivityDTO resultVariable =  new ActivityDTO (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetScheduleEntriesAsync(Token token,GetScheduleEntriesParam getScheduleEntriesParam,PartialRetrievingInfo retrievingInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetScheduleEntriesAsync(token, getScheduleEntriesParam, retrievingInfo, null);
    }

    public void GetScheduleEntriesAsync(final Token token,final GetScheduleEntriesParam getScheduleEntriesParam,final PartialRetrievingInfo retrievingInfo,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, PagedResultOfScheduleEntryBaseDTO5oAtqRlh>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PagedResultOfScheduleEntryBaseDTO5oAtqRlh doInBackground(Void... params) {
                return GetScheduleEntries(token, getScheduleEntriesParam, retrievingInfo, headers);
            }
            @Override
            protected void onPostExecute(PagedResultOfScheduleEntryBaseDTO5oAtqRlh result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetScheduleEntries", result);
                }
            }
        }.execute();
    }

    public PagedResultOfScheduleEntryBaseDTO5oAtqRlh GetScheduleEntries(Token token,GetScheduleEntriesParam getScheduleEntriesParam,PartialRetrievingInfo retrievingInfo){
        return GetScheduleEntries(token, getScheduleEntriesParam, retrievingInfo, null);
    }

    public PagedResultOfScheduleEntryBaseDTO5oAtqRlh GetScheduleEntries(Token token,GetScheduleEntriesParam getScheduleEntriesParam,PartialRetrievingInfo retrievingInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","GetScheduleEntries");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","getScheduleEntriesParam",new GetScheduleEntriesParam().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","retrievingInfo",new PartialRetrievingInfo().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("getScheduleEntriesParam",getScheduleEntriesParam);
        soapReq.addProperty("retrievingInfo",retrievingInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/GetScheduleEntries", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/GetScheduleEntries", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("GetScheduleEntriesResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("GetScheduleEntriesResult");
                    PagedResultOfScheduleEntryBaseDTO5oAtqRlh resultVariable =  new PagedResultOfScheduleEntryBaseDTO5oAtqRlh (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void SaveScheduleEntriesRangeAsync(Token token,SaveScheduleEntryRangeParam saveScheduleEntryRangeParam) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveScheduleEntriesRangeAsync(token, saveScheduleEntryRangeParam, null);
    }

    public void SaveScheduleEntriesRangeAsync(final Token token,final SaveScheduleEntryRangeParam saveScheduleEntryRangeParam,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, VectorScheduleEntryBaseDTO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorScheduleEntryBaseDTO doInBackground(Void... params) {
                return SaveScheduleEntriesRange(token, saveScheduleEntryRangeParam, headers);
            }
            @Override
            protected void onPostExecute(VectorScheduleEntryBaseDTO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveScheduleEntriesRange", result);
                }
            }
        }.execute();
    }

    public VectorScheduleEntryBaseDTO SaveScheduleEntriesRange(Token token,SaveScheduleEntryRangeParam saveScheduleEntryRangeParam){
        return SaveScheduleEntriesRange(token, saveScheduleEntryRangeParam, null);
    }

    public VectorScheduleEntryBaseDTO SaveScheduleEntriesRange(Token token,SaveScheduleEntryRangeParam saveScheduleEntryRangeParam,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","SaveScheduleEntriesRange");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","saveScheduleEntryRangeParam",new SaveScheduleEntryRangeParam().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("saveScheduleEntryRangeParam",saveScheduleEntryRangeParam);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/SaveScheduleEntriesRange", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/SaveScheduleEntriesRange", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("SaveScheduleEntriesRangeResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("SaveScheduleEntriesRangeResult");
                    VectorScheduleEntryBaseDTO resultVariable = new VectorScheduleEntryBaseDTO(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void DeleteCustomerAsync(Token token,CustomerDTO customerDto) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteCustomerAsync(token, customerDto, null);
    }

    public void DeleteCustomerAsync(final Token token,final CustomerDTO customerDto,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                DeleteCustomer(token, customerDto, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DeleteCustomer", result);
                }
            }
        }.execute();
    }

    public void DeleteCustomer(Token token,CustomerDTO customerDto){
        DeleteCustomer(token, customerDto, null);
    }

    public void DeleteCustomer(Token token,CustomerDTO customerDto,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","DeleteCustomer");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","customerDto",new CustomerDTO().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("customerDto",customerDto);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/DeleteCustomer", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/DeleteCustomer", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

    public void GetCustomersAsync(final CustomerSearchCriteria customerSearchCriteria,final PartialRetrievingInfo retrievingInfo) throws Exception{
        executeAsync(new Functions.IFunc<PagedResultOfCustomerDTO5oAtqRlh>() {
            @Override
            public PagedResultOfCustomerDTO5oAtqRlh Func() throws Exception {
                return GetCustomers(customerSearchCriteria, retrievingInfo);
            }
        }, "GetCustomers") ;
    }


    public PagedResultOfCustomerDTO5oAtqRlh GetCustomers(final CustomerSearchCriteria customerSearchCriteria,final PartialRetrievingInfo retrievingInfo) throws Exception {

        return (PagedResultOfCustomerDTO5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetCustomers");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"customerSearchCriteria",new CustomerSearchCriteria().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"retrievingInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("customerSearchCriteria",customerSearchCriteria);
                soapReq.addProperty("retrievingInfo",retrievingInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return getResult(PagedResultOfCustomerDTO5oAtqRlh.class,result,"GetCustomersResult");
            }
        },"GetCustomers");
    }

    public void ReservationsOperationAsync(Token token,ReservationsOperationParam param) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ReservationsOperationAsync(token, param, null);
    }

    public void ReservationsOperationAsync(final Token token,final ReservationsOperationParam param,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, ReservationOperationResult>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ReservationOperationResult doInBackground(Void... params) {
                return ReservationsOperation(token, param, headers);
            }
            @Override
            protected void onPostExecute(ReservationOperationResult result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ReservationsOperation", result);
                }
            }
        }.execute();
    }

    public ReservationOperationResult ReservationsOperation(Token token,ReservationsOperationParam param){
        return ReservationsOperation(token, param, null);
    }

    public ReservationOperationResult ReservationsOperation(Token token,ReservationsOperationParam param,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","ReservationsOperation");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","param",new ReservationsOperationParam().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("param",param);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/ReservationsOperation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/ReservationsOperation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("ReservationsOperationResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("ReservationsOperationResult");
                    ReservationOperationResult resultVariable =  new ReservationOperationResult (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void PaymentBasketOperationAsync(Token token,PaymentBasketDTO koszyk) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PaymentBasketOperationAsync(token, koszyk, null);
    }

    public void PaymentBasketOperationAsync(final Token token,final PaymentBasketDTO koszyk,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, PaymentBasketDTO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PaymentBasketDTO doInBackground(Void... params) {
                return PaymentBasketOperation(token, koszyk, headers);
            }
            @Override
            protected void onPostExecute(PaymentBasketDTO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PaymentBasketOperation", result);
                }
            }
        }.execute();
    }

    public PaymentBasketDTO PaymentBasketOperation(Token token,PaymentBasketDTO koszyk){
        return PaymentBasketOperation(token, koszyk, null);
    }

    public PaymentBasketDTO PaymentBasketOperation(Token token,PaymentBasketDTO koszyk,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","PaymentBasketOperation");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","koszyk",new PaymentBasketDTO().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("koszyk",koszyk);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/PaymentBasketOperation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/PaymentBasketOperation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("PaymentBasketOperationResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("PaymentBasketOperationResult");
                    PaymentBasketDTO resultVariable =  new PaymentBasketDTO (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetPaymentBasketsAsync(Token token,GetPaymentBasketParam getPaymentBasketParam,PartialRetrievingInfo retrievingInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPaymentBasketsAsync(token, getPaymentBasketParam, retrievingInfo, null);
    }

    public void GetPaymentBasketsAsync(final Token token,final GetPaymentBasketParam getPaymentBasketParam,final PartialRetrievingInfo retrievingInfo,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, PagedResultOfPaymentBasketDTO5oAtqRlh>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PagedResultOfPaymentBasketDTO5oAtqRlh doInBackground(Void... params) {
                return GetPaymentBaskets(token, getPaymentBasketParam, retrievingInfo, headers);
            }
            @Override
            protected void onPostExecute(PagedResultOfPaymentBasketDTO5oAtqRlh result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetPaymentBaskets", result);
                }
            }
        }.execute();
    }

    public PagedResultOfPaymentBasketDTO5oAtqRlh GetPaymentBaskets(Token token,GetPaymentBasketParam getPaymentBasketParam,PartialRetrievingInfo retrievingInfo){
        return GetPaymentBaskets(token, getPaymentBasketParam, retrievingInfo, null);
    }

    public PagedResultOfPaymentBasketDTO5oAtqRlh GetPaymentBaskets(Token token,GetPaymentBasketParam getPaymentBasketParam,PartialRetrievingInfo retrievingInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","GetPaymentBaskets");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","getPaymentBasketParam",new GetPaymentBasketParam().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","retrievingInfo",new PartialRetrievingInfo().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("getPaymentBasketParam",getPaymentBasketParam);
        soapReq.addProperty("retrievingInfo",retrievingInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/GetPaymentBaskets", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/GetPaymentBaskets", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("GetPaymentBasketsResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("GetPaymentBasketsResult");
                    PagedResultOfPaymentBasketDTO5oAtqRlh resultVariable =  new PagedResultOfPaymentBasketDTO5oAtqRlh (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void DeleteCustomerGroupAsync(Token token,CustomerGroupDTO group) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteCustomerGroupAsync(token, group, null);
    }

    public void DeleteCustomerGroupAsync(final Token token,final CustomerGroupDTO group,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                DeleteCustomerGroup(token, group, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DeleteCustomerGroup", result);
                }
            }
        }.execute();
    }

    public void DeleteCustomerGroup(Token token,CustomerGroupDTO group){
        DeleteCustomerGroup(token, group, null);
    }

    public void DeleteCustomerGroup(Token token,CustomerGroupDTO group,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","DeleteCustomerGroup");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","group",new CustomerGroupDTO().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("group",group);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/DeleteCustomerGroup", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/DeleteCustomerGroup", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

    public void GetProductsAsync(Token token,GetProductsParam getProductsParam,PartialRetrievingInfo retrievingInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetProductsAsync(token, getProductsParam, retrievingInfo, null);
    }

    public void GetProductsAsync(final Token token,final GetProductsParam getProductsParam,final PartialRetrievingInfo retrievingInfo,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, PagedResultOfProductInfoDTO5oAtqRlh>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PagedResultOfProductInfoDTO5oAtqRlh doInBackground(Void... params) {
                return GetProducts(token, getProductsParam, retrievingInfo, headers);
            }
            @Override
            protected void onPostExecute(PagedResultOfProductInfoDTO5oAtqRlh result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetProducts", result);
                }
            }
        }.execute();
    }

    public PagedResultOfProductInfoDTO5oAtqRlh GetProducts(Token token,GetProductsParam getProductsParam,PartialRetrievingInfo retrievingInfo){
        return GetProducts(token, getProductsParam, retrievingInfo, null);
    }

    public PagedResultOfProductInfoDTO5oAtqRlh GetProducts(Token token,GetProductsParam getProductsParam,PartialRetrievingInfo retrievingInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","GetProducts");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","getProductsParam",new GetProductsParam().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","retrievingInfo",new PartialRetrievingInfo().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("getProductsParam",getProductsParam);
        soapReq.addProperty("retrievingInfo",retrievingInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/GetProducts", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/GetProducts", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("GetProductsResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("GetProductsResult");
                    PagedResultOfProductInfoDTO5oAtqRlh resultVariable =  new PagedResultOfProductInfoDTO5oAtqRlh (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void SaveReminderAsync(Token token,ReminderItemDTO reminder) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveReminderAsync(token, reminder, null);
    }

    public void SaveReminderAsync(final Token token,final ReminderItemDTO reminder,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, ReminderItemDTO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ReminderItemDTO doInBackground(Void... params) {
                return SaveReminder(token, reminder, headers);
            }
            @Override
            protected void onPostExecute(ReminderItemDTO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SaveReminder", result);
                }
            }
        }.execute();
    }

    public ReminderItemDTO SaveReminder(Token token,ReminderItemDTO reminder){
        return SaveReminder(token, reminder, null);
    }

    public ReminderItemDTO SaveReminder(Token token,ReminderItemDTO reminder,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","SaveReminder");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","reminder",new ReminderItemDTO().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("reminder",reminder);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/SaveReminder", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/SaveReminder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("SaveReminderResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("SaveReminderResult");
                    ReminderItemDTO resultVariable =  new ReminderItemDTO (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void GetRemindersAsync(Token token,GetRemindersParam remindersParam,PartialRetrievingInfo pageInfo) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetRemindersAsync(token, remindersParam, pageInfo, null);
    }

    public void GetRemindersAsync(final Token token,final GetRemindersParam remindersParam,final PartialRetrievingInfo pageInfo,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, PagedResultOfReminderItemDTO5oAtqRlh>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PagedResultOfReminderItemDTO5oAtqRlh doInBackground(Void... params) {
                return GetReminders(token, remindersParam, pageInfo, headers);
            }
            @Override
            protected void onPostExecute(PagedResultOfReminderItemDTO5oAtqRlh result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetReminders", result);
                }
            }
        }.execute();
    }

    public PagedResultOfReminderItemDTO5oAtqRlh GetReminders(Token token,GetRemindersParam remindersParam,PartialRetrievingInfo pageInfo){
        return GetReminders(token, remindersParam, pageInfo, null);
    }

    public PagedResultOfReminderItemDTO5oAtqRlh GetReminders(Token token,GetRemindersParam remindersParam,PartialRetrievingInfo pageInfo,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","GetReminders");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","remindersParam",new GetRemindersParam().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","pageInfo",new PartialRetrievingInfo().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("remindersParam",remindersParam);
        soapReq.addProperty("pageInfo",pageInfo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/GetReminders", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/GetReminders", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("GetRemindersResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("GetRemindersResult");
                    PagedResultOfReminderItemDTO5oAtqRlh resultVariable =  new PagedResultOfReminderItemDTO5oAtqRlh (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void ReminderOperationAsync(Token token,ReminderOperationParam remindersParam) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ReminderOperationAsync(token, remindersParam, null);
    }

    public void ReminderOperationAsync(final Token token,final ReminderOperationParam remindersParam,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, ReminderItemDTO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ReminderItemDTO doInBackground(Void... params) {
                return ReminderOperation(token, remindersParam, headers);
            }
            @Override
            protected void onPostExecute(ReminderItemDTO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ReminderOperation", result);
                }
            }
        }.execute();
    }

    public ReminderItemDTO ReminderOperation(Token token,ReminderOperationParam remindersParam){
        return ReminderOperation(token, remindersParam, null);
    }

    public ReminderItemDTO ReminderOperation(Token token,ReminderOperationParam remindersParam,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","ReminderOperation");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","remindersParam",new ReminderOperationParam().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("remindersParam",remindersParam);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/ReminderOperation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/ReminderOperation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.hasProperty("ReminderOperationResult"))
                {
                    SoapObject j = (SoapObject)result.getProperty("ReminderOperationResult");
                    ReminderItemDTO resultVariable =  new ReminderItemDTO (j);
                    return resultVariable;

                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }


    public void VoteAsync(final VoteParams param) throws Exception{

        executeAsync(new Functions.IFunc<VoteResult>() {
            @Override
            public VoteResult Func() throws Exception {
                return Vote(param);
            }
        }, "Vote") ;

    }

    public VoteResult Vote(final VoteParams param) throws Exception {

        return (VoteResult)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"Vote");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"param",new VoteParams().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(VoteResult.class,result,"VoteResult");
            }
        },"Vote");


    }

    public void ExerciseOperationAsync(Token token,ExerciseOperationParam param) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ExerciseOperationAsync(token, param, null);
    }

    public void ExerciseOperationAsync(final Token token,final ExerciseOperationParam param,final List<HeaderProperty> headers) throws Exception{

        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                ExerciseOperation(token, param, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ExerciseOperation", result);
                }
            }
        }.execute();
    }

    public void ExerciseOperation(Token token,ExerciseOperationParam param){
        ExerciseOperation(token, param, null);
    }

    public void ExerciseOperation(Token token,ExerciseOperationParam param,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://MYBASERVICE.TK/","ExerciseOperation");
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","token",new Token().getClass());
        soapEnvelope.addMapping("http://MYBASERVICE.TK/","param",new ExerciseOperationParam().getClass());
        soapReq.addProperty("token",token);
        soapReq.addProperty("param",param);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://MYBASERVICE.TK/ExerciseOperation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://MYBASERVICE.TK/ExerciseOperation", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }

    public void ReportExerciseWeightAsync(final ReportExerciseWeightParams param) throws Exception{

        executeAsync(new Functions.IFunc<VectorWeightExerciseReportResultItem>() {
            @Override
            public VectorWeightExerciseReportResultItem Func() throws Exception {
                return ReportExerciseWeight( param);
            }
        }, "ReportExerciseWeight") ;

    }

    public VectorWeightExerciseReportResultItem ReportExerciseWeight(final ReportExerciseWeightParams param) throws Exception {

        return (VectorWeightExerciseReportResultItem)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"ReportExerciseWeight");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"param",new ReportExerciseWeightParams().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(VectorWeightExerciseReportResultItem.class,result,"ReportExerciseWeightResult");
            }
        },"ReportExerciseWeight");

    }



    public void ReportWeightRepetitionsAsync(final ReportWeightRepetitionsParams param) throws Exception{

        executeAsync(new Functions.IFunc<VectorWeightReperitionReportResultItem>() {
            @Override
            public VectorWeightReperitionReportResultItem Func() throws Exception {
                return ReportWeightRepetitions( param);
            }
        }, "ReportWeightRepetitions") ;

    }

    public VectorWeightReperitionReportResultItem ReportWeightRepetitions(final ReportWeightRepetitionsParams param) throws Exception {

        return (VectorWeightReperitionReportResultItem)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"ReportWeightRepetitions");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"param",new ReportWeightRepetitionsParams().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(VectorWeightReperitionReportResultItem.class,result,"ReportWeightRepetitionsResult");
            }
        },"ReportWeightRepetitions");

    }

    public void GetMessagesAsync(final GetMessagesCriteria param,final PartialRetrievingInfo pageInfo) throws Exception{

        executeAsync(new Functions.IFunc<PagedResultOfMessageDTO5oAtqRlh>() {
            @Override
            public PagedResultOfMessageDTO5oAtqRlh Func() throws Exception {
                return GetMessages(param, pageInfo);
            }
        }, "GetMessages") ;

    }

    public PagedResultOfMessageDTO5oAtqRlh GetMessages(final GetMessagesCriteria param,final PartialRetrievingInfo pageInfo) throws Exception {
        return (PagedResultOfMessageDTO5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();
                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetMessages");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"param",new GetMessagesCriteria().getClass());
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"pageInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapReq.addProperty("pageInfo",pageInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result)throws Exception {
                return getResult(PagedResultOfMessageDTO5oAtqRlh.class,result,"GetMessagesResult");
            }
        },"GetMessages");

    }

    public void GetMyPlacesAsync(final MyPlaceSearchCriteria param,final PartialRetrievingInfo pageInfo) throws Exception{

        executeAsync(new Functions.IFunc<PagedResultOfMyPlaceDTO5oAtqRlh>() {
            @Override
            public PagedResultOfMyPlaceDTO5oAtqRlh Func() throws Exception {
                return GetMyPlaces(param, pageInfo);
            }
        }, "GetMyPlaces") ;

    }


    public PagedResultOfMyPlaceDTO5oAtqRlh GetMyPlaces(final MyPlaceSearchCriteria param,final PartialRetrievingInfo pageInfo) throws Exception {


        return (PagedResultOfMyPlaceDTO5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetMyPlaces");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"param",new MyPlaceSearchCriteria().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"pageInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapReq.addProperty("pageInfo",pageInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(PagedResultOfMyPlaceDTO5oAtqRlh.class,result,"GetMyPlacesResult");
            }
        },"GetMyPlaces");


    }


    public void ReportExerciseRecordsAsync(final ExerciseRecordsParams param,final PartialRetrievingInfo pageInfo) throws Exception{

        executeAsync(new Functions.IFunc<PagedResultOfExerciseRecordsReportResultItem5oAtqRlh>() {
            @Override
            public PagedResultOfExerciseRecordsReportResultItem5oAtqRlh Func() throws Exception {
                return ReportExerciseRecords(param, pageInfo);
            }
        }, "ReportExerciseRecords") ;

    }

    public PagedResultOfExerciseRecordsReportResultItem5oAtqRlh ReportExerciseRecords(final ExerciseRecordsParams param,final PartialRetrievingInfo pageInfo) throws Exception {

        return (PagedResultOfExerciseRecordsReportResultItem5oAtqRlh)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"ReportExerciseRecords");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"param",new ExerciseRecordsParams().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"pageInfo",new PartialRetrievingInfo().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapReq.addProperty("pageInfo",pageInfo);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(PagedResultOfExerciseRecordsReportResultItem5oAtqRlh.class,result,"ReportExerciseRecordsResult");
            }
        },"ReportExerciseRecords");

    }

    public void GetFeaturedDataAsync(final GetFeaturedDataParam param) throws Exception{

        executeAsync(new Functions.IFunc<FeaturedData>() {
            @Override
            public FeaturedData Func() throws Exception {
                return GetFeaturedData(param);
            }
        }, "GetFeaturedData") ;

    }


    public FeaturedData GetFeaturedData(final GetFeaturedDataParam param) throws Exception {

        return (FeaturedData)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();

                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetFeaturedData");
                soapEnvelope.addMapping(WcfConstans.ServiceNamespace,"token",new Token().getClass());
                soapEnvelope.addMapping(WcfConstans.Namespace,"param",new GetFeaturedDataParam().getClass());
                soapReq.addProperty("token",ApplicationState.getCurrent().getSessionData().token);
                soapReq.addProperty("param",param);
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                return getResult(FeaturedData.class,result,"GetFeaturedDataResult");
            }
        },"GetFeaturedData");

    }

    public void GetGPSCoordinatesAsync(final UUID gpsTrackerEntryId) throws Exception{
        executeAsync(new Functions.IFunc<ArrayList<GPSPoint>>() {
            @Override
            public ArrayList<GPSPoint> Func() throws Exception {
                return GetGPSCoordinates(gpsTrackerEntryId);
            }
        }, "GetGPSCoordinates") ;
    }


    public ArrayList<GPSPoint> GetGPSCoordinates(final UUID gpsTrackerEntryId) throws Exception {

        return (ArrayList<GPSPoint>)execute(new IWcfMethod() {
            @Override
            public SoapSerializationEnvelope CreateSoapEnvelope() {
                SoapSerializationEnvelope soapEnvelope = new ExtendedSoapSerializationEnvelope();


                org.kxml2.kdom.Element[] standardHeaders=soapEnvelope.headerOut;
                soapEnvelope.headerOut=new org.kxml2.kdom.Element[4];
                soapEnvelope.headerOut[0]=standardHeaders[0];
                soapEnvelope.headerOut[1]=standardHeaders[1];

                org.kxml2.kdom.Element h = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"SessionId");
                h.addChild(org.kxml2.kdom.Node.TEXT, ApplicationState.getCurrent().getSessionData().token.sessionId);
                soapEnvelope.headerOut[2]=h;
                h = new org.kxml2.kdom.Element().createElement(WcfConstans.Namespace,"GPSTrackerEntryId");
                h.addChild(org.kxml2.kdom.Node.TEXT, gpsTrackerEntryId.toString());
                soapEnvelope.headerOut[3]=h;


                SoapObject soapReq = new SoapObject(WcfConstans.Namespace,"GetGPSCoordinatesParam");
                soapEnvelope.setOutputSoapObject(soapReq);
                return soapEnvelope;
            }

            @Override
            public Object ProcessResult(SoapSerializationEnvelope envelope,SoapObject result) throws Exception{
                String rawImage = result.getProperty("Stream").toString();
                byte[] a = Base64.decode(rawImage, Base64.DEFAULT);
                String jsonString=decompress(a);
                Gson gson = new GsonBuilder().create();

                Type collectionType = new TypeToken<Collection<GPSPoint>>(){}.getType();
                Collection<GPSPoint> points = gson.fromJson(jsonString, collectionType);

                return points;
            }
        },"GetGPSCoordinates");

    }

    public void cancel() {
        isCanceled=true;
    }
}
