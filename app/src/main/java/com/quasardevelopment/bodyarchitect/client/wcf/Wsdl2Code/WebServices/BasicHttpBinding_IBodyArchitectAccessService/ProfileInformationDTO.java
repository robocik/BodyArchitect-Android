package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.model.IPerson;
import com.quasardevelopment.bodyarchitect.client.util.DateTimeHelper;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import org.joda.time.DateTime;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;

public class ProfileInformationDTO extends BAGlobalObject implements KvmSerializable,Serializable,IPerson {
    
    public String aboutInformation;
    public DateTime birthday;
    public DataInfoDTO dataInfo;
    public VectorUserSearchDTO favoriteUsers;
    public VectorUserSearchDTO friends;
    public VectorFriendInvitationDTO invitations;
    public boolean isActivated;
    public DateTime lastLogin;
    public LicenceInfoDTO licence;
    public VectorExerciseRecordsReportResultItem records;
    public DateTime retrievedDateTime;
    public ProfileSettingsDTO settings;
    public UserSearchDTO user;
    public WymiaryDTO wymiary;
    
    public ProfileInformationDTO(){}
    
    public ProfileInformationDTO(SoapObject soapObject,ReferencesManager referencesTable) throws Exception
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("AboutInformation"))
        {
            Object obj = soapObject.getProperty("AboutInformation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("AboutInformation");
                aboutInformation = j.toString();
            }else if (obj!= null && obj instanceof String){
                aboutInformation = (String) soapObject.getProperty("AboutInformation");
            }
        }

        if (soapObject.hasProperty("Birthday"))
        {
            Object obj = soapObject.getProperty("Birthday");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Birthday");
                birthday = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                birthday = DateTimeHelper.ConvertFromWebServiceNew((String)soapObject.getProperty("Birthday"));
            }
        }

        if (soapObject.hasProperty("DataInfo"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("DataInfo");
            dataInfo =  new DataInfoDTO (j);
            
        }
        if (soapObject.hasProperty("FavoriteUsers"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("FavoriteUsers");
            favoriteUsers = new VectorUserSearchDTO(j,referencesTable);
        }
        if (soapObject.hasProperty("Friends"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Friends");
            friends = new VectorUserSearchDTO(j,referencesTable);
        }
        if (soapObject.hasProperty("Invitations"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Invitations");
            invitations = new VectorFriendInvitationDTO(j,referencesTable);
        }
        if (soapObject.hasProperty("IsActivated"))
        {
            Object obj = soapObject.getProperty("IsActivated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("IsActivated");
                isActivated = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isActivated = (Boolean) soapObject.getProperty("IsActivated");
            }
        }

        if (soapObject.hasProperty("LastLogin"))
        {
            Object obj = soapObject.getProperty("LastLogin");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("LastLogin");
                lastLogin = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                lastLogin =DateTimeHelper.ConvertFromWebServiceNew ((String) soapObject.getProperty("LastLogin"));
            }
        }
        if (soapObject.hasProperty("Licence"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Licence");
            licence =  new LicenceInfoDTO (j);
            
        }
        if (soapObject.hasProperty("Records"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Records");
            records = new VectorExerciseRecordsReportResultItem(j,referencesTable);
        }
        if (soapObject.hasProperty("RetrievedDateTime"))
        {
            Object obj = soapObject.getProperty("RetrievedDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RetrievedDateTime");
                retrievedDateTime = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                retrievedDateTime = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("RetrievedDateTime"));
            }
        }
        if (soapObject.hasProperty("Settings"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Settings");
            settings =  new ProfileSettingsDTO (j,referencesTable);
            
        }
        if (soapObject.hasProperty("User"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("User");
            user = (UserSearchDTO)referencesTable.get(j,UserSearchDTO.class);
            
        }
        if (soapObject.hasProperty("Wymiary"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Wymiary");
            wymiary = (WymiaryDTO)referencesTable.get(j,WymiaryDTO.class);
            
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return aboutInformation;
            case 1:
                return birthday;
            case 2:
                return dataInfo;
            case 3:
                return favoriteUsers;
            case 4:
                return friends;
            case 5:
                return invitations;
            case 6:
                return isActivated;
            case 7:
                return lastLogin;
            case 8:
                return licence;
            case 9:
                return records;
            case 10:
                return retrievedDateTime;
            case 11:
                return settings;
            case 12:
                return user;
            case 13:
                return wymiary;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 14;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AboutInformation";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Birthday";
                break;
            case 2:
                info.type = DataInfoDTO.class;
                info.name = "DataInfo";
                break;
            case 3:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "FavoriteUsers";
                break;
            case 4:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Friends";
                break;
            case 5:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Invitations";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsActivated";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastLogin";
                break;
            case 8:
                info.type = LicenceInfoDTO.class;
                info.name = "Licence";
                break;
            case 9:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Records";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RetrievedDateTime";
                break;
            case 11:
                info.type = ProfileSettingsDTO.class;
                info.name = "Settings";
                break;
            case 12:
                info.type = UserSearchDTO.class;
                info.name = "User";
                break;
            case 13:
                info.type = WymiaryDTO.class;
                info.name = "Wymiary";
                break;
        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    @Override
    public DateTime getBirthday() {
        return birthday;
    }

    @Override
    public WS_Enums.Gender getGender() {
        return user.gender;
    }

    @Override
    public WymiaryDTO getWymiary() {
        return wymiary;
    }
}
