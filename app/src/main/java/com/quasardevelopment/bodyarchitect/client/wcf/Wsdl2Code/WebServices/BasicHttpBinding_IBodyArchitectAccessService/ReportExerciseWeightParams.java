package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class ReportExerciseWeightParams implements KvmSerializable {
    
    public String customerId;
    public VectorExerciseDoneWay doneWays;
    public String endDate;
    public boolean endDateSpecified;
    public VectorString exercises;
    public VectorString myPlaces;
    public int repetitionsFrom;
    public boolean repetitionsFromSpecified;
    public int repetitionsTo;
    public boolean repetitionsToSpecified;
    public boolean restPause;
    public boolean restPauseSpecified;
    public VectorSetType setTypes;
    public String startDate;
    public boolean startDateSpecified;
    public boolean superSlow;
    public boolean superSlowSpecified;
    public boolean useAllEntries;
    public boolean useAllEntriesSpecified;
    public String userId;
    
    public ReportExerciseWeightParams(){}
    
    public ReportExerciseWeightParams(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("CustomerId"))
        {
            Object obj = soapObject.getProperty("CustomerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CustomerId");
                customerId = j.toString();
            }else if (obj!= null && obj instanceof String){
                customerId = (String) soapObject.getProperty("CustomerId");
            }
        }
        if (soapObject.hasProperty("DoneWays"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("DoneWays");
            doneWays = new VectorExerciseDoneWay(j);
        }
        if (soapObject.hasProperty("EndDate"))
        {
            Object obj = soapObject.getProperty("EndDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("EndDate");
                endDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                endDate = (String) soapObject.getProperty("EndDate");
            }
        }
        if (soapObject.hasProperty("EndDateSpecified"))
        {
            Object obj = soapObject.getProperty("EndDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("EndDateSpecified");
                endDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                endDateSpecified = (Boolean) soapObject.getProperty("EndDateSpecified");
            }
        }
        if (soapObject.hasProperty("Exercises"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Exercises");
            exercises = new VectorString(j);
        }
        if (soapObject.hasProperty("MyPlaces"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("MyPlaces");
            myPlaces = new VectorString(j);
        }
        if (soapObject.hasProperty("RepetitionsFrom"))
        {
            Object obj = soapObject.getProperty("RepetitionsFrom");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RepetitionsFrom");
                repetitionsFrom = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                repetitionsFrom = (Integer) soapObject.getProperty("RepetitionsFrom");
            }
        }
        if (soapObject.hasProperty("RepetitionsFromSpecified"))
        {
            Object obj = soapObject.getProperty("RepetitionsFromSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RepetitionsFromSpecified");
                repetitionsFromSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                repetitionsFromSpecified = (Boolean) soapObject.getProperty("RepetitionsFromSpecified");
            }
        }
        if (soapObject.hasProperty("RepetitionsTo"))
        {
            Object obj = soapObject.getProperty("RepetitionsTo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RepetitionsTo");
                repetitionsTo = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                repetitionsTo = (Integer) soapObject.getProperty("RepetitionsTo");
            }
        }
        if (soapObject.hasProperty("RepetitionsToSpecified"))
        {
            Object obj = soapObject.getProperty("RepetitionsToSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RepetitionsToSpecified");
                repetitionsToSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                repetitionsToSpecified = (Boolean) soapObject.getProperty("RepetitionsToSpecified");
            }
        }
        if (soapObject.hasProperty("RestPause"))
        {
            Object obj = soapObject.getProperty("RestPause");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RestPause");
                restPause = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                restPause = (Boolean) soapObject.getProperty("RestPause");
            }
        }
        if (soapObject.hasProperty("RestPauseSpecified"))
        {
            Object obj = soapObject.getProperty("RestPauseSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RestPauseSpecified");
                restPauseSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                restPauseSpecified = (Boolean) soapObject.getProperty("RestPauseSpecified");
            }
        }
        if (soapObject.hasProperty("SetTypes"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("SetTypes");
            setTypes = new VectorSetType(j);
        }
        if (soapObject.hasProperty("StartDate"))
        {
            Object obj = soapObject.getProperty("StartDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("StartDate");
                startDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                startDate = (String) soapObject.getProperty("StartDate");
            }
        }
        if (soapObject.hasProperty("StartDateSpecified"))
        {
            Object obj = soapObject.getProperty("StartDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("StartDateSpecified");
                startDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                startDateSpecified = (Boolean) soapObject.getProperty("StartDateSpecified");
            }
        }
        if (soapObject.hasProperty("SuperSlow"))
        {
            Object obj = soapObject.getProperty("SuperSlow");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("SuperSlow");
                superSlow = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                superSlow = (Boolean) soapObject.getProperty("SuperSlow");
            }
        }
        if (soapObject.hasProperty("SuperSlowSpecified"))
        {
            Object obj = soapObject.getProperty("SuperSlowSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("SuperSlowSpecified");
                superSlowSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                superSlowSpecified = (Boolean) soapObject.getProperty("SuperSlowSpecified");
            }
        }
        if (soapObject.hasProperty("UseAllEntries"))
        {
            Object obj = soapObject.getProperty("UseAllEntries");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UseAllEntries");
                useAllEntries = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                useAllEntries = (Boolean) soapObject.getProperty("UseAllEntries");
            }
        }
        if (soapObject.hasProperty("UseAllEntriesSpecified"))
        {
            Object obj = soapObject.getProperty("UseAllEntriesSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UseAllEntriesSpecified");
                useAllEntriesSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                useAllEntriesSpecified = (Boolean) soapObject.getProperty("UseAllEntriesSpecified");
            }
        }
        if (soapObject.hasProperty("UserId"))
        {
            Object obj = soapObject.getProperty("UserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UserId");
                userId = j.toString();
            }else if (obj!= null && obj instanceof String){
                userId = (String) soapObject.getProperty("UserId");
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return customerId;
            case 1:
                return doneWays;
            case 2:
                return endDate;
            case 3:
                return endDateSpecified;
            case 4:
                return exercises;
            case 5:
                return myPlaces;
            case 6:
                return repetitionsFrom;
            case 7:
                return repetitionsFromSpecified;
            case 8:
                return repetitionsTo;
            case 9:
                return repetitionsToSpecified;
            case 10:
                return restPause;
            case 11:
                return restPauseSpecified;
            case 12:
                return setTypes;
            case 13:
                return startDate;
            case 14:
                return startDateSpecified;
            case 15:
                return superSlow;
            case 16:
                return superSlowSpecified;
            case 17:
                return useAllEntries;
            case 18:
                return useAllEntriesSpecified;
            case 19:
                return userId;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 20;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CustomerId";
                break;
            case 1:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "DoneWays";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "EndDate";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "EndDateSpecified";
                break;
            case 4:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Exercises";
                break;
            case 5:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "MyPlaces";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "RepetitionsFrom";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RepetitionsFromSpecified";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "RepetitionsTo";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RepetitionsToSpecified";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RestPause";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RestPauseSpecified";
                break;
            case 12:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "SetTypes";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StartDate";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "StartDateSpecified";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "SuperSlow";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "SuperSlowSpecified";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "UseAllEntries";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "UseAllEntriesSpecified";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "UserId";
                break;
        }
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
