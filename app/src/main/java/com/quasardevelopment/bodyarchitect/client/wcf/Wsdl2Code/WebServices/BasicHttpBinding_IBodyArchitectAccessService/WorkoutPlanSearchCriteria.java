package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.SearchSortOrder;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;
import java.util.UUID;

public class WorkoutPlanSearchCriteria implements KvmSerializable {
    
    public VectorInt32 days= new VectorInt32();
    public VectorTrainingPlanDifficult difficults = new VectorTrainingPlanDifficult();
    public VectorString languages = new VectorString();
    public UUID planId;
    public VectorWorkoutPlanPurpose purposes= new VectorWorkoutPlanPurpose();
    public VectorWorkoutPlanSearchCriteriaGroup searchGroups=new VectorWorkoutPlanSearchCriteriaGroup();
    public boolean sortAscending;
    public SearchSortOrder sortOrder=SearchSortOrder.Newest;
    public UUID userId;
    public VectorTrainingType workoutPlanType = new VectorTrainingType();
    
    public WorkoutPlanSearchCriteria(){}
    
    public WorkoutPlanSearchCriteria(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Days"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Days");
            days = new VectorInt32(j);
        }
        if (soapObject.hasProperty("Difficults"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Difficults");
            difficults = new VectorTrainingPlanDifficult(j);
        }
        if (soapObject.hasProperty("Languages"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Languages");
            languages = new VectorString(j);
        }
        if (soapObject.hasProperty("PlanId"))
        {
            Object obj = soapObject.getProperty("PlanId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("PlanId");
                planId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                planId =  UUID.fromString((String) soapObject.getProperty("PlanId"));
            }
        }
        if (soapObject.hasProperty("Purposes"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Purposes");
            purposes = new VectorWorkoutPlanPurpose(j);
        }
        if (soapObject.hasProperty("SearchGroups"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("SearchGroups");
            searchGroups = new VectorWorkoutPlanSearchCriteriaGroup(j);
        }
        if (soapObject.hasProperty("SortAscending"))
        {
            Object obj = soapObject.getProperty("SortAscending");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("SortAscending");
                sortAscending = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                sortAscending = (Boolean) soapObject.getProperty("SortAscending");
            }
        }
        if (soapObject.hasProperty("SortOrder"))
        {
            Object obj = soapObject.getProperty("SortOrder");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("SortOrder");
                sortOrder = SearchSortOrder.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("UserId"))
        {
            Object obj = soapObject.getProperty("UserId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UserId");
                userId =  UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                userId =  UUID.fromString((String) soapObject.getProperty("UserId"));
            }
        }
        if (soapObject.hasProperty("WorkoutPlanType"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("WorkoutPlanType");
            workoutPlanType = new VectorTrainingType(j);
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return days;
            case 1:
                return difficults;
            case 2:
                return languages;
            case 3:
                return planId;
            case 4:
                return purposes;
            case 5:
                return searchGroups;
            case 6:
                return sortAscending;
            case 7:
                return sortOrder.toString();
            case 8:
                return userId;
            case 9:
                return workoutPlanType;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 10;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Days";
                break;
            case 1:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Difficults";
                break;
            case 2:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Languages";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PlanId";
                break;
            case 4:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Purposes";
                break;
            case 5:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "SearchGroups";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "SortAscending";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SortOrder";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "UserId";
                break;
            case 9:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "WorkoutPlanType";
                break;
        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
