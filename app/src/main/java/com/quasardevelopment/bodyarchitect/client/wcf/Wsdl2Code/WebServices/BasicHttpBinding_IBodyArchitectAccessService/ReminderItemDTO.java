package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.ReminderRepetitions;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.ReminderType;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;

public class ReminderItemDTO implements KvmSerializable,Serializable {
    
    public String connectedObject;
    public String dateTime;
    public boolean dateTimeSpecified;
    public String lastShown;
    public boolean lastShownSpecified;
    public String name;
    public String profileId;
    public String remindBefore;
    public ReminderRepetitions repetitions;
    public boolean repetitionsSpecified;
    public ReminderType type;
    public boolean typeSpecified;
    public int version;
    public boolean versionSpecified;
    public String globalId;
    public String id;
    public String ref;
    
    public ReminderItemDTO(){}
    
    public ReminderItemDTO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("ConnectedObject"))
        {
            Object obj = soapObject.getProperty("ConnectedObject");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ConnectedObject");
                connectedObject = j.toString();
            }else if (obj!= null && obj instanceof String){
                connectedObject = (String) soapObject.getProperty("ConnectedObject");
            }
        }
        if (soapObject.hasProperty("DateTime"))
        {
            Object obj = soapObject.getProperty("DateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DateTime");
                dateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateTime = (String) soapObject.getProperty("DateTime");
            }
        }
        if (soapObject.hasProperty("DateTimeSpecified"))
        {
            Object obj = soapObject.getProperty("DateTimeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DateTimeSpecified");
                dateTimeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateTimeSpecified = (Boolean) soapObject.getProperty("DateTimeSpecified");
            }
        }
        if (soapObject.hasProperty("LastShown"))
        {
            Object obj = soapObject.getProperty("LastShown");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("LastShown");
                lastShown = j.toString();
            }else if (obj!= null && obj instanceof String){
                lastShown = (String) soapObject.getProperty("LastShown");
            }
        }
        if (soapObject.hasProperty("LastShownSpecified"))
        {
            Object obj = soapObject.getProperty("LastShownSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("LastShownSpecified");
                lastShownSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                lastShownSpecified = (Boolean) soapObject.getProperty("LastShownSpecified");
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Name");
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) soapObject.getProperty("Name");
            }
        }
        if (soapObject.hasProperty("ProfileId"))
        {
            Object obj = soapObject.getProperty("ProfileId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ProfileId");
                profileId = j.toString();
            }else if (obj!= null && obj instanceof String){
                profileId = (String) soapObject.getProperty("ProfileId");
            }
        }
        if (soapObject.hasProperty("RemindBefore"))
        {
            Object obj = soapObject.getProperty("RemindBefore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RemindBefore");
                remindBefore = j.toString();
            }else if (obj!= null && obj instanceof String){
                remindBefore = (String) soapObject.getProperty("RemindBefore");
            }
        }
        if (soapObject.hasProperty("Repetitions"))
        {
            Object obj = soapObject.getProperty("Repetitions");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Repetitions");
                repetitions = ReminderRepetitions.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("RepetitionsSpecified"))
        {
            Object obj = soapObject.getProperty("RepetitionsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RepetitionsSpecified");
                repetitionsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                repetitionsSpecified = (Boolean) soapObject.getProperty("RepetitionsSpecified");
            }
        }
        if (soapObject.hasProperty("Type"))
        {
            Object obj = soapObject.getProperty("Type");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Type");
                type = ReminderType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("TypeSpecified"))
        {
            Object obj = soapObject.getProperty("TypeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TypeSpecified");
                typeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                typeSpecified = (Boolean) soapObject.getProperty("TypeSpecified");
            }
        }
        if (soapObject.hasProperty("Version"))
        {
            Object obj = soapObject.getProperty("Version");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Version");
                version = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                version = (Integer) soapObject.getProperty("Version");
            }
        }
        if (soapObject.hasProperty("VersionSpecified"))
        {
            Object obj = soapObject.getProperty("VersionSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("VersionSpecified");
                versionSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                versionSpecified = (Boolean) soapObject.getProperty("VersionSpecified");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = j.toString();
            }else if (obj!= null && obj instanceof String){
                globalId = (String) soapObject.getProperty("GlobalId");
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Id");
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) soapObject.getProperty("Id");
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Ref");
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) soapObject.getProperty("Ref");
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return connectedObject;
            case 1:
                return dateTime;
            case 2:
                return dateTimeSpecified;
            case 3:
                return lastShown;
            case 4:
                return lastShownSpecified;
            case 5:
                return name;
            case 6:
                return profileId;
            case 7:
                return remindBefore;
            case 8:
                return repetitions.toString();
            case 9:
                return repetitionsSpecified;
            case 10:
                return type.toString();
            case 11:
                return typeSpecified;
            case 12:
                return version;
            case 13:
                return versionSpecified;
            case 14:
                return globalId;
            case 15:
                return id;
            case 16:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 17;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ConnectedObject";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DateTime";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DateTimeSpecified";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastShown";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "LastShownSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProfileId";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RemindBefore";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Repetitions";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RepetitionsSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Type";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TypeSpecified";
                break;
            case 12:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Version";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "VersionSpecified";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
