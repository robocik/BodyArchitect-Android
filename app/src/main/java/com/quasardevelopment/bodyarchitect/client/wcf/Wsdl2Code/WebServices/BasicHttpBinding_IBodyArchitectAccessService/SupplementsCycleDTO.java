package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.TrainingEnd;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class SupplementsCycleDTO implements KvmSerializable {
    
    public String supplementsCycleDefinitionId;
    public int totalWeeks;
    public boolean totalWeeksSpecified;
    public String trainingDays;
    public double weight;
    public boolean weightSpecified;
    public VectorEntryObjectDTO entryObjects;
    public String customerId;
    public String endDate;
    public boolean endDateSpecified;
    public String name;
    public int percentageCompleted;
    public boolean percentageCompletedSpecified;
    public String profileId;
    public String remindBefore;
    public String startDate;
    public boolean startDateSpecified;
    public TrainingEnd trainingEnd;
    public boolean trainingEndSpecified;
    public String typeId;
    public String globalId;
    public String id;
    public String ref;
    
    public SupplementsCycleDTO(){}
    
    public SupplementsCycleDTO(SoapObject soapObject,ReferencesManager referencesTable)    throws Exception
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("SupplementsCycleDefinitionId"))
        {
            Object obj = soapObject.getProperty("SupplementsCycleDefinitionId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("SupplementsCycleDefinitionId");
                supplementsCycleDefinitionId = j.toString();
            }else if (obj!= null && obj instanceof String){
                supplementsCycleDefinitionId = (String) soapObject.getProperty("SupplementsCycleDefinitionId");
            }
        }
        if (soapObject.hasProperty("TotalWeeks"))
        {
            Object obj = soapObject.getProperty("TotalWeeks");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TotalWeeks");
                totalWeeks = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalWeeks = (Integer) soapObject.getProperty("TotalWeeks");
            }
        }
        if (soapObject.hasProperty("TotalWeeksSpecified"))
        {
            Object obj = soapObject.getProperty("TotalWeeksSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TotalWeeksSpecified");
                totalWeeksSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalWeeksSpecified = (Boolean) soapObject.getProperty("TotalWeeksSpecified");
            }
        }
        if (soapObject.hasProperty("TrainingDays"))
        {
            Object obj = soapObject.getProperty("TrainingDays");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TrainingDays");
                trainingDays = j.toString();
            }else if (obj!= null && obj instanceof String){
                trainingDays = (String) soapObject.getProperty("TrainingDays");
            }
        }
        if (soapObject.hasProperty("Weight"))
        {
            Object obj = soapObject.getProperty("Weight");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Weight");
                weight = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                weight = (Integer) soapObject.getProperty("Weight");
            }
        }
        if (soapObject.hasProperty("WeightSpecified"))
        {
            Object obj = soapObject.getProperty("WeightSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("WeightSpecified");
                weightSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                weightSpecified = (Boolean) soapObject.getProperty("WeightSpecified");
            }
        }
        if (soapObject.hasProperty("EntryObjects"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("EntryObjects");
            entryObjects = new VectorEntryObjectDTO(j,referencesTable);
        }
        if (soapObject.hasProperty("CustomerId"))
        {
            Object obj = soapObject.getProperty("CustomerId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CustomerId");
                customerId = j.toString();
            }else if (obj!= null && obj instanceof String){
                customerId = (String) soapObject.getProperty("CustomerId");
            }
        }
        if (soapObject.hasProperty("EndDate"))
        {
            Object obj = soapObject.getProperty("EndDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("EndDate");
                endDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                endDate = (String) soapObject.getProperty("EndDate");
            }
        }
        if (soapObject.hasProperty("EndDateSpecified"))
        {
            Object obj = soapObject.getProperty("EndDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("EndDateSpecified");
                endDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                endDateSpecified = (Boolean) soapObject.getProperty("EndDateSpecified");
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Name");
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) soapObject.getProperty("Name");
            }
        }
        if (soapObject.hasProperty("PercentageCompleted"))
        {
            Object obj = soapObject.getProperty("PercentageCompleted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("PercentageCompleted");
                percentageCompleted = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                percentageCompleted = (Integer) soapObject.getProperty("PercentageCompleted");
            }
        }
        if (soapObject.hasProperty("PercentageCompletedSpecified"))
        {
            Object obj = soapObject.getProperty("PercentageCompletedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("PercentageCompletedSpecified");
                percentageCompletedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                percentageCompletedSpecified = (Boolean) soapObject.getProperty("PercentageCompletedSpecified");
            }
        }
        if (soapObject.hasProperty("ProfileId"))
        {
            Object obj = soapObject.getProperty("ProfileId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ProfileId");
                profileId = j.toString();
            }else if (obj!= null && obj instanceof String){
                profileId = (String) soapObject.getProperty("ProfileId");
            }
        }
        if (soapObject.hasProperty("RemindBefore"))
        {
            Object obj = soapObject.getProperty("RemindBefore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RemindBefore");
                remindBefore = j.toString();
            }else if (obj!= null && obj instanceof String){
                remindBefore = (String) soapObject.getProperty("RemindBefore");
            }
        }
        if (soapObject.hasProperty("StartDate"))
        {
            Object obj = soapObject.getProperty("StartDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("StartDate");
                startDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                startDate = (String) soapObject.getProperty("StartDate");
            }
        }
        if (soapObject.hasProperty("StartDateSpecified"))
        {
            Object obj = soapObject.getProperty("StartDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("StartDateSpecified");
                startDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                startDateSpecified = (Boolean) soapObject.getProperty("StartDateSpecified");
            }
        }
        if (soapObject.hasProperty("TrainingEnd"))
        {
            Object obj = soapObject.getProperty("TrainingEnd");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TrainingEnd");
                trainingEnd = TrainingEnd.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("TrainingEndSpecified"))
        {
            Object obj = soapObject.getProperty("TrainingEndSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TrainingEndSpecified");
                trainingEndSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                trainingEndSpecified = (Boolean) soapObject.getProperty("TrainingEndSpecified");
            }
        }
        if (soapObject.hasProperty("TypeId"))
        {
            Object obj = soapObject.getProperty("TypeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TypeId");
                typeId = j.toString();
            }else if (obj!= null && obj instanceof String){
                typeId = (String) soapObject.getProperty("TypeId");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = j.toString();
            }else if (obj!= null && obj instanceof String){
                globalId = (String) soapObject.getProperty("GlobalId");
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Id");
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) soapObject.getProperty("Id");
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Ref");
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) soapObject.getProperty("Ref");
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return supplementsCycleDefinitionId;
            case 1:
                return totalWeeks;
            case 2:
                return totalWeeksSpecified;
            case 3:
                return trainingDays;
            case 4:
                return weight;
            case 5:
                return weightSpecified;
            case 6:
                return entryObjects;
            case 7:
                return customerId;
            case 8:
                return endDate;
            case 9:
                return endDateSpecified;
            case 10:
                return name;
            case 11:
                return percentageCompleted;
            case 12:
                return percentageCompletedSpecified;
            case 13:
                return profileId;
            case 14:
                return remindBefore;
            case 15:
                return startDate;
            case 16:
                return startDateSpecified;
            case 17:
                return trainingEnd.toString();
            case 18:
                return trainingEndSpecified;
            case 19:
                return typeId;
            case 20:
                return globalId;
            case 21:
                return id;
            case 22:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 23;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "SupplementsCycleDefinitionId";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "TotalWeeks";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TotalWeeksSpecified";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TrainingDays";
                break;
            case 4:
                info.type = Double.class;
                info.name = "Weight";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "WeightSpecified";
                break;
            case 6:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "EntryObjects";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CustomerId";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "EndDate";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "EndDateSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 11:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PercentageCompleted";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "PercentageCompletedSpecified";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProfileId";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RemindBefore";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "StartDate";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "StartDateSpecified";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TrainingEnd";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TrainingEndSpecified";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TypeId";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
