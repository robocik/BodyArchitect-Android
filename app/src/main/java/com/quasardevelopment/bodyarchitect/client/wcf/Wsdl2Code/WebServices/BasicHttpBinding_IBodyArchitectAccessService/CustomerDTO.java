package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.model.IPerson;
import com.quasardevelopment.bodyarchitect.client.util.DateTimeHelper;
import com.quasardevelopment.bodyarchitect.client.util.Helper;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.Gender;
import org.joda.time.DateTime;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.text.ParseException;
import java.util.Hashtable;
import java.util.UUID;

public class CustomerDTO extends BAGlobalObject implements KvmSerializable,Serializable,WcfInterfaces.IReferenceObject,IPerson {
    
    public AddressDTO address;
    public DateTime birthday;
    public UserDTO connectedAccount;
    public DateTime creationDate;
    public String email;
    public String firstName;
    public Gender gender;
    public boolean isVirtual;
    public String lastName;
    public String phoneNumber;
    public PictureInfoDTO picture;
    public UUID profileId;
    public String remindBefore;
    public CustomerSettingsDTO settings;
    public int version;
    public WymiaryDTO wymiary;
    
    public CustomerDTO(){}
    
    public CustomerDTO(SoapObject soapObject,ReferencesManager referencesTable)     throws ParseException
    {
        if (soapObject == null)
            return;
        if (soapObject.hasAttribute("Id"))
        {
            Object obj = soapObject.getAttribute("Id");
            referencesTable.Add((String) obj, this);
        }
        if (soapObject.hasProperty("Address"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Address");
            address =  new AddressDTO (j,referencesTable);
            
        }
        if (soapObject.hasProperty("Birthday"))
        {
            Object obj = soapObject.getProperty("Birthday");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Birthday");
                birthday = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                birthday = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("Birthday"));
            }
        }
        if (soapObject.hasProperty("ConnectedAccount"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("ConnectedAccount");
            connectedAccount = (UserDTO)referencesTable.get(j,UserDTO.class);
            
        }
        if (soapObject.hasProperty("CreationDate"))
        {
            Object obj = soapObject.getProperty("CreationDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CreationDate");
                creationDate = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                creationDate = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("CreationDate"));
            }
        }
        if (soapObject.hasProperty("Email"))
        {
            Object obj = soapObject.getProperty("Email");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Email");
                email = j.toString();
            }else if (obj!= null && obj instanceof String){
                email = (String) soapObject.getProperty("Email");
            }
        }
        if (soapObject.hasProperty("FirstName"))
        {
            Object obj = soapObject.getProperty("FirstName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("FirstName");
                firstName = j.toString();
            }else if (obj!= null && obj instanceof String){
                firstName = (String) soapObject.getProperty("FirstName");
            }
        }
        if (soapObject.hasProperty("Gender"))
        {
            Object obj = soapObject.getProperty("Gender");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Gender");
                gender = Gender.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsVirtual"))
        {
            Object obj = soapObject.getProperty("IsVirtual");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("IsVirtual");
                isVirtual = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isVirtual = (Boolean) soapObject.getProperty("IsVirtual");
            }
        }
        if (soapObject.hasProperty("LastName"))
        {
            Object obj = soapObject.getProperty("LastName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("LastName");
                lastName = j.toString();
            }else if (obj!= null && obj instanceof String){
                lastName = (String) soapObject.getProperty("LastName");
            }
        }
        if (soapObject.hasProperty("PhoneNumber"))
        {
            Object obj = soapObject.getProperty("PhoneNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("PhoneNumber");
                phoneNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                phoneNumber = (String) soapObject.getProperty("PhoneNumber");
            }
        }
        if (soapObject.hasProperty("Picture"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Picture");
            picture = (PictureInfoDTO) referencesTable.get(j,PictureInfoDTO.class);
            
        }
        if (soapObject.hasProperty("ProfileId"))
        {
            Object obj = soapObject.getProperty("ProfileId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ProfileId");
                profileId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                profileId =UUID.fromString( (String) soapObject.getProperty("ProfileId"));
            }
        }
        if (soapObject.hasProperty("RemindBefore"))
        {
            Object obj = soapObject.getProperty("RemindBefore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RemindBefore");
                remindBefore = j.toString();
            }else if (obj!= null && obj instanceof String){
                remindBefore = (String) soapObject.getProperty("RemindBefore");
            }
        }
        if (soapObject.hasProperty("Settings"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Settings");
            settings =  new CustomerSettingsDTO (j);
            
        }
        if (soapObject.hasProperty("Version"))
        {
            Object obj = soapObject.getProperty("Version");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Version");
                version = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                version = (Integer) soapObject.getProperty("Version");
            }
        }
        if (soapObject.hasProperty("Wymiary"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Wymiary");
            wymiary = (WymiaryDTO)referencesTable.get(j,WymiaryDTO.class);
            
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                globalId = UUID.fromString((String) soapObject.getProperty("GlobalId"));
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return address;
            case 1:
                return birthday;
            case 2:
                return connectedAccount;
            case 3:
                return creationDate;
            case 4:
                return email;
            case 5:
                return firstName;
            case 6:
                return gender.toString();
            case 7:
                return isVirtual;
            case 8:
                return lastName;
            case 9:
                return phoneNumber;
            case 10:
                return picture;
            case 11:
                return profileId;
            case 12:
                return remindBefore;
            case 13:
                return settings;
            case 14:
                return version;
            case 15:
                return wymiary;
            case 16:
                return globalId;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 17;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = AddressDTO.class;
                info.name = "Address";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Birthday";
                break;
            case 2:
                info.type = UserDTO.class;
                info.name = "ConnectedAccount";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreationDate";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Email";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "FirstName";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Gender";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsVirtual";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastName";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PhoneNumber";
                break;
            case 10:
                info.type = PictureInfoDTO.class;
                info.name = "Picture";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProfileId";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RemindBefore";
                break;
            case 13:
                info.type = CustomerSettingsDTO.class;
                info.name = "Settings";
                break;
            case 14:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Version";
                break;
            case 15:
                info.type = WymiaryDTO.class;
                info.name = "Wymiary";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    public String getFullName()
    {
        return String.format("%s %s", Helper.GetDisplayText(lastName),Helper.GetDisplayText(firstName)).trim();
    }

    @Override
    public DateTime getBirthday() {
        return birthday;
    }

    @Override
    public Gender getGender() {
        return gender;
    }

    @Override
    public WymiaryDTO getWymiary() {
        return wymiary;
    }
}
