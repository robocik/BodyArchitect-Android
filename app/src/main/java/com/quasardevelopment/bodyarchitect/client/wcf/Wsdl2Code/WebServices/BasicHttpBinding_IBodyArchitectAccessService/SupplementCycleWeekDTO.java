package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class SupplementCycleWeekDTO implements KvmSerializable {
    
    public String comment;
    public int cycleWeekEnd;
    public boolean cycleWeekEndSpecified;
    public int cycleWeekStart;
    public boolean cycleWeekStartSpecified;
    public VectorSupplementCycleEntryDTO dosages;
    public boolean isRepetitable;
    public boolean isRepetitableSpecified;
    public String name;
    public String globalId;
    public String id;
    public String ref;
    
    public SupplementCycleWeekDTO(){}
    
    public SupplementCycleWeekDTO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Comment"))
        {
            Object obj = soapObject.getProperty("Comment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Comment");
                comment = j.toString();
            }else if (obj!= null && obj instanceof String){
                comment = (String) soapObject.getProperty("Comment");
            }
        }
        if (soapObject.hasProperty("CycleWeekEnd"))
        {
            Object obj = soapObject.getProperty("CycleWeekEnd");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CycleWeekEnd");
                cycleWeekEnd = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                cycleWeekEnd = (Integer) soapObject.getProperty("CycleWeekEnd");
            }
        }
        if (soapObject.hasProperty("CycleWeekEndSpecified"))
        {
            Object obj = soapObject.getProperty("CycleWeekEndSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CycleWeekEndSpecified");
                cycleWeekEndSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                cycleWeekEndSpecified = (Boolean) soapObject.getProperty("CycleWeekEndSpecified");
            }
        }
        if (soapObject.hasProperty("CycleWeekStart"))
        {
            Object obj = soapObject.getProperty("CycleWeekStart");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CycleWeekStart");
                cycleWeekStart = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                cycleWeekStart = (Integer) soapObject.getProperty("CycleWeekStart");
            }
        }
        if (soapObject.hasProperty("CycleWeekStartSpecified"))
        {
            Object obj = soapObject.getProperty("CycleWeekStartSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CycleWeekStartSpecified");
                cycleWeekStartSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                cycleWeekStartSpecified = (Boolean) soapObject.getProperty("CycleWeekStartSpecified");
            }
        }
        if (soapObject.hasProperty("Dosages"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Dosages");
            dosages = new VectorSupplementCycleEntryDTO(j);
        }
        if (soapObject.hasProperty("IsRepetitable"))
        {
            Object obj = soapObject.getProperty("IsRepetitable");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("IsRepetitable");
                isRepetitable = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isRepetitable = (Boolean) soapObject.getProperty("IsRepetitable");
            }
        }
        if (soapObject.hasProperty("IsRepetitableSpecified"))
        {
            Object obj = soapObject.getProperty("IsRepetitableSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("IsRepetitableSpecified");
                isRepetitableSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isRepetitableSpecified = (Boolean) soapObject.getProperty("IsRepetitableSpecified");
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Name");
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) soapObject.getProperty("Name");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = j.toString();
            }else if (obj!= null && obj instanceof String){
                globalId = (String) soapObject.getProperty("GlobalId");
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Id");
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) soapObject.getProperty("Id");
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Ref");
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) soapObject.getProperty("Ref");
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return comment;
            case 1:
                return cycleWeekEnd;
            case 2:
                return cycleWeekEndSpecified;
            case 3:
                return cycleWeekStart;
            case 4:
                return cycleWeekStartSpecified;
            case 5:
                return dosages;
            case 6:
                return isRepetitable;
            case 7:
                return isRepetitableSpecified;
            case 8:
                return name;
            case 9:
                return globalId;
            case 10:
                return id;
            case 11:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 12;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Comment";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CycleWeekEnd";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "CycleWeekEndSpecified";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "CycleWeekStart";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "CycleWeekStartSpecified";
                break;
            case 5:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Dosages";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsRepetitable";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsRepetitableSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
