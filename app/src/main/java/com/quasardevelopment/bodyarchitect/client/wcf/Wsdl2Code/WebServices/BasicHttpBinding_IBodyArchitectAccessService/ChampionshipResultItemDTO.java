package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;

public class ChampionshipResultItemDTO implements KvmSerializable,Serializable {
    
    public ChampionshipCategoryDTO category;
    public ChampionshipCustomerDTO customer;
    public ChampionshipGroupDTO group;
    public int position;
    public boolean positionSpecified;
    public double value;
    public boolean valueSpecified;
    public String globalId;
    public String id;
    public String ref;
    
    public ChampionshipResultItemDTO(){}
    
    public ChampionshipResultItemDTO(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Category"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Category");
            category =  new ChampionshipCategoryDTO (j);
            
        }
        if (soapObject.hasProperty("Customer"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Customer");
            customer =  new ChampionshipCustomerDTO (j);
            
        }
        if (soapObject.hasProperty("Group"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Group");
            group =  new ChampionshipGroupDTO (j);
            
        }
        if (soapObject.hasProperty("Position"))
        {
            Object obj = soapObject.getProperty("Position");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Position");
                position = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                position = (Integer) soapObject.getProperty("Position");
            }
        }
        if (soapObject.hasProperty("PositionSpecified"))
        {
            Object obj = soapObject.getProperty("PositionSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("PositionSpecified");
                positionSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                positionSpecified = (Boolean) soapObject.getProperty("PositionSpecified");
            }
        }
        if (soapObject.hasProperty("Value"))
        {
            Object obj = soapObject.getProperty("Value");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Value");
                value = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                value = (Integer) soapObject.getProperty("Value");
            }
        }
        if (soapObject.hasProperty("ValueSpecified"))
        {
            Object obj = soapObject.getProperty("ValueSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ValueSpecified");
                valueSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                valueSpecified = (Boolean) soapObject.getProperty("ValueSpecified");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = j.toString();
            }else if (obj!= null && obj instanceof String){
                globalId = (String) soapObject.getProperty("GlobalId");
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Id");
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) soapObject.getProperty("Id");
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Ref");
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) soapObject.getProperty("Ref");
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return category;
            case 1:
                return customer;
            case 2:
                return group;
            case 3:
                return position;
            case 4:
                return positionSpecified;
            case 5:
                return value;
            case 6:
                return valueSpecified;
            case 7:
                return globalId;
            case 8:
                return id;
            case 9:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 10;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = ChampionshipCategoryDTO.class;
                info.name = "Category";
                break;
            case 1:
                info.type = ChampionshipCustomerDTO.class;
                info.name = "Customer";
                break;
            case 2:
                info.type = ChampionshipGroupDTO.class;
                info.name = "Group";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Position";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "PositionSpecified";
                break;
            case 5:
                info.type = Double.class;
                info.name = "Value";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ValueSpecified";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
