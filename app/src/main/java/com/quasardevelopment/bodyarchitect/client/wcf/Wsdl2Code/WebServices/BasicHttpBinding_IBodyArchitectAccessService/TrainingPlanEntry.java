package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.ExerciseDoneWay;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.text.ParseException;
import java.util.Hashtable;
import java.util.UUID;

public class TrainingPlanEntry extends BAGlobalObject implements KvmSerializable,Serializable,WcfInterfaces.IReferenceObject {
    
    public String comment;
    public TrainingPlanDay day;
    public ExerciseDoneWay doneWay=ExerciseDoneWay.Default;
    public ExerciseLightDTO exercise;
    public String groupName;
    public Integer restSeconds;
    public VectorTrainingPlanSerie sets = new VectorTrainingPlanSerie();
    
    public TrainingPlanEntry(){}
    
    public TrainingPlanEntry(SoapObject soapObject,ReferencesManager referencesTable)          throws ParseException
    {
        if (soapObject == null)
            return;
        if (soapObject.hasAttribute("Id"))
        {
            Object obj = soapObject.getAttribute("Id");
            referencesTable.Add((String) obj, this);
        }
        if (soapObject.hasProperty("Comment"))
        {
            Object obj = soapObject.getProperty("Comment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Comment");
                comment = j.toString();
            }else if (obj!= null && obj instanceof String){
                comment = (String) soapObject.getProperty("Comment");
            }
        }
        if (soapObject.hasProperty("Day"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Day");
            day = (TrainingPlanDay)referencesTable.get(j,TrainingPlanDay.class);
        }
        if (soapObject.hasProperty("DoneWay"))
        {
            Object obj = soapObject.getProperty("DoneWay");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DoneWay");
                doneWay = ExerciseDoneWay.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("Exercise"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Exercise");
            exercise = (ExerciseLightDTO)referencesTable.get(j,ExerciseLightDTO.class);
        }
        if (soapObject.hasProperty("GroupName"))
        {
            Object obj = soapObject.getProperty("GroupName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GroupName");
                groupName = j.toString();
            }else if (obj!= null && obj instanceof String){
                groupName = (String) soapObject.getProperty("GroupName");
            }
        }
        if (soapObject.hasProperty("RestSeconds"))
        {
            Object obj = soapObject.getProperty("RestSeconds");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RestSeconds");
                restSeconds = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                restSeconds = (Integer) soapObject.getProperty("RestSeconds");
            }
        }
        if (soapObject.hasProperty("Sets"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Sets");
            sets = new VectorTrainingPlanSerie(j,referencesTable);
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                globalId = UUID.fromString( (String) soapObject.getProperty("GlobalId"));
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return globalId;
            case 1:
                return comment;
            case 2:
                return day;
            case 3:
                return doneWay.toString();
            case 4:
                return exercise;
            case 5:
                return groupName;
            case 6:
                return restSeconds;
            case 7:
                return sets;

        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 8;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Comment";
                break;
            case 2:
                info.type = TrainingPlanDay.class;
                info.name = "Day";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DoneWay";
                break;
            case 4:
                info.type = ExerciseLightDTO.class;
                info.name = "Exercise";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GroupName";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "RestSeconds";
                break;
            case 7:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "Sets";
                break;

        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
