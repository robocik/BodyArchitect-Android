package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.DropSetType;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.SetType;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;
import java.util.UUID;

public class TrainingPlanSerie extends BAGlobalObject implements KvmSerializable,Serializable,WcfInterfaces.IReferenceObject {
    
    public String comment;
    public DropSetType dropSet=DropSetType.None;
    public boolean isRestPause;
    public boolean isSuperSlow;
    public Integer repetitionNumberMax;
    public Integer repetitionNumberMin;
    public SetType repetitionsType=SetType.Normalna;
    
    public TrainingPlanSerie(){}
    
    public TrainingPlanSerie(SoapObject soapObject,ReferencesManager referencesTable)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasAttribute("Id"))
        {
            Object obj = soapObject.getAttribute("Id");
            referencesTable.Add((String) obj, this);
        }
        if (soapObject.hasProperty("Comment"))
        {
            Object obj = soapObject.getProperty("Comment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Comment");
                comment = j.toString();
            }else if (obj!= null && obj instanceof String){
                comment = (String) soapObject.getProperty("Comment");
            }
        }
        if (soapObject.hasProperty("DropSet"))
        {
            Object obj = soapObject.getProperty("DropSet");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DropSet");
                dropSet = DropSetType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("IsRestPause"))
        {
            Object obj = soapObject.getProperty("IsRestPause");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("IsRestPause");
                isRestPause = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isRestPause = (Boolean) soapObject.getProperty("IsRestPause");
            }
        }
        if (soapObject.hasProperty("IsSuperSlow"))
        {
            Object obj = soapObject.getProperty("IsSuperSlow");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("IsSuperSlow");
                isSuperSlow = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isSuperSlow = (Boolean) soapObject.getProperty("IsSuperSlow");
            }
        }
        if (soapObject.hasProperty("RepetitionNumberMax"))
        {
            Object obj = soapObject.getProperty("RepetitionNumberMax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RepetitionNumberMax");
                repetitionNumberMax = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                repetitionNumberMax = (Integer) soapObject.getProperty("RepetitionNumberMax");
            }
        }
        if (soapObject.hasProperty("RepetitionNumberMin"))
        {
            Object obj = soapObject.getProperty("RepetitionNumberMin");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RepetitionNumberMin");
                repetitionNumberMin = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                repetitionNumberMin = (Integer) soapObject.getProperty("RepetitionNumberMin");
            }
        }
        if (soapObject.hasProperty("RepetitionsType"))
        {
            Object obj = soapObject.getProperty("RepetitionsType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RepetitionsType");
                repetitionsType = SetType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                globalId = UUID.fromString((String) soapObject.getProperty("GlobalId"));
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return globalId;
            case 1:
                return comment;
            case 2:
                return dropSet.toString();
            case 3:
                return isRestPause;
            case 4:
                return isSuperSlow;
            case 5:
                return repetitionNumberMax;
            case 6:
                return repetitionNumberMin;
            case 7:
                return repetitionsType.toString();

        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 8;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Comment";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DropSet";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsRestPause";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "IsSuperSlow";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "RepetitionNumberMax";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "RepetitionNumberMin";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RepetitionsType";
                break;

        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
