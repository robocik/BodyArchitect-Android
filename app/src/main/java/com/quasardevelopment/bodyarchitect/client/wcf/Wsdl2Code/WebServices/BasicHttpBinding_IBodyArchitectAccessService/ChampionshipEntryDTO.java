package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.text.ParseException;
import java.util.Hashtable;

public class ChampionshipEntryDTO implements KvmSerializable,Serializable {
    
    public ChampionshipCustomerDTO customer;
    public ExerciseLightDTO exercise;
    public double max;
    public boolean maxSpecified;
    public ChampionshipTryDTO try1;
    public ChampionshipTryDTO try2;
    public ChampionshipTryDTO try3;
    public double wilks;
    public boolean wilksSpecified;
    public String globalId;
    public String id;
    public String ref;
    
    public ChampionshipEntryDTO(){}
    
    public ChampionshipEntryDTO(SoapObject soapObject,ReferencesManager referencesTable)   throws ParseException
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Customer"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Customer");
            customer =  new ChampionshipCustomerDTO (j);
            
        }
        if (soapObject.hasProperty("Exercise"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Exercise");
            exercise =  new ExerciseLightDTO (j,referencesTable);
            
        }
        if (soapObject.hasProperty("Max"))
        {
            Object obj = soapObject.getProperty("Max");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Max");
                max = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                max = (Integer) soapObject.getProperty("Max");
            }
        }
        if (soapObject.hasProperty("MaxSpecified"))
        {
            Object obj = soapObject.getProperty("MaxSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("MaxSpecified");
                maxSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                maxSpecified = (Boolean) soapObject.getProperty("MaxSpecified");
            }
        }
        if (soapObject.hasProperty("Try1"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Try1");
            try1 =  new ChampionshipTryDTO (j);
            
        }
        if (soapObject.hasProperty("Try2"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Try2");
            try2 =  new ChampionshipTryDTO (j);
            
        }
        if (soapObject.hasProperty("Try3"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Try3");
            try3 =  new ChampionshipTryDTO (j);
            
        }
        if (soapObject.hasProperty("Wilks"))
        {
            Object obj = soapObject.getProperty("Wilks");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Wilks");
                wilks = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                wilks = (Integer) soapObject.getProperty("Wilks");
            }
        }
        if (soapObject.hasProperty("WilksSpecified"))
        {
            Object obj = soapObject.getProperty("WilksSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("WilksSpecified");
                wilksSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                wilksSpecified = (Boolean) soapObject.getProperty("WilksSpecified");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = j.toString();
            }else if (obj!= null && obj instanceof String){
                globalId = (String) soapObject.getProperty("GlobalId");
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Id");
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) soapObject.getProperty("Id");
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Ref");
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) soapObject.getProperty("Ref");
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return customer;
            case 1:
                return exercise;
            case 2:
                return max;
            case 3:
                return maxSpecified;
            case 4:
                return try1;
            case 5:
                return try2;
            case 6:
                return try3;
            case 7:
                return wilks;
            case 8:
                return wilksSpecified;
            case 9:
                return globalId;
            case 10:
                return id;
            case 11:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 12;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = ChampionshipCustomerDTO.class;
                info.name = "Customer";
                break;
            case 1:
                info.type = ExerciseLightDTO.class;
                info.name = "Exercise";
                break;
            case 2:
                info.type = Double.class;
                info.name = "Max";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "MaxSpecified";
                break;
            case 4:
                info.type = ChampionshipTryDTO.class;
                info.name = "Try1";
                break;
            case 5:
                info.type = ChampionshipTryDTO.class;
                info.name = "Try2";
                break;
            case 6:
                info.type = ChampionshipTryDTO.class;
                info.name = "Try3";
                break;
            case 7:
                info.type = Double.class;
                info.name = "Wilks";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "WilksSpecified";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
