package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.model.LocalObjectKey;
import com.quasardevelopment.bodyarchitect.client.util.DateTimeHelper;
import com.quasardevelopment.bodyarchitect.client.util.Helper;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.Intensity;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.Mood;
import org.joda.time.DateTime;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.util.Hashtable;
import java.util.UUID;

public class StrengthTrainingEntryDTO extends EntryObjectDTO implements Serializable {
    
    public DateTime endTime;
    public VectorStrengthTrainingItemDTO entries=new VectorStrengthTrainingItemDTO();
    public Intensity intensity=Intensity.NotSet;
    public Mood mood=Mood.Normal;
    public MyPlaceLightDTO myPlace;
    public DateTime startTime;
    public UUID trainingPlanId;
    public UUID trainingPlanItemId;
    
    public StrengthTrainingEntryDTO(){}
    
    public StrengthTrainingEntryDTO(SoapObject soapObject,ReferencesManager referencesTable)      throws Exception
    {
        super(soapObject,referencesTable);
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("EndTime"))
        {
            Object obj = soapObject.getProperty("EndTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("EndTime");
                endTime = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                endTime = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("EndTime"));
            }
        }
        if (soapObject.hasProperty("Entries"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Entries");
            entries = new VectorStrengthTrainingItemDTO(j,referencesTable);
        }
        if (soapObject.hasProperty("Intensity"))
        {
            Object obj = soapObject.getProperty("Intensity");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Intensity");
                intensity = Intensity.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("Mood"))
        {
            Object obj = soapObject.getProperty("Mood");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Mood");
                mood = Mood.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("MyPlace"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("MyPlace");
            myPlace = (MyPlaceLightDTO)referencesTable.get(j,MyPlaceLightDTO.class);
        }
        if (soapObject.hasProperty("StartTime"))
        {
            Object obj = soapObject.getProperty("StartTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("StartTime");
                startTime = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                startTime = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("StartTime"));
            }
        }
        if (soapObject.hasProperty("TrainingPlanId"))
        {
            Object obj = soapObject.getProperty("TrainingPlanId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TrainingPlanId");
                trainingPlanId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                trainingPlanId = UUID.fromString((String) soapObject.getProperty("TrainingPlanId"));
            }
        }
        if (soapObject.hasProperty("TrainingPlanItemId"))
        {
            Object obj = soapObject.getProperty("TrainingPlanItemId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TrainingPlanItemId");
                trainingPlanItemId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                trainingPlanItemId = UUID.fromString((String) soapObject.getProperty("TrainingPlanItemId"));
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        int count=super.getPropertyCount();
        if(arg0==count)
        {
            return endTime;
        }
        if(arg0==count+1)
        {
            return entries;
        }
        if(arg0==count+2)
        {
            return intensity.toString();
        }
        if(arg0==count+3)
        {
            return mood.toString();
        }
        if(arg0==count+4)
        {
            return myPlace;
        }
        if(arg0==count+5)
        {
            return startTime;
        }
        if(arg0==count+6)
        {
            return trainingPlanId;
        }
        if(arg0==count+7)
        {
            return trainingPlanItemId;
        }
        return super.getProperty(arg0);
    }
    
    @Override
    public int getPropertyCount() {
        return 8+super.getPropertyCount();
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        int count=super.getPropertyCount();
        if(index==count)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "EndTime";
        }
        if(index==count+1)
        {
            info.type = PropertyInfo.VECTOR_CLASS;
            info.name = "Entries";
        }
        if(index==count+2)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Intensity";
        }
        if(index==count+3)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Mood";
        }
        if(index==count+4)
        {
            info.type = MyPlaceLightDTO.class;
            info.name = "MyPlace";
        }
        if(index==count+5)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "StartTime";
        }
        if(index==count+6)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "TrainingPlanId";
        }
        if(index==count+7)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "TrainingPlanItemId";
        }
        super.getPropertyInfo(index,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    public void ResetPositions()
    {
        for (int index = 0; index < entries.size(); index++)
        {
            StrengthTrainingItemDTO itemDto = entries.get(index);
            itemDto.position = index;
        }
    }

    public SerieDTO getSerie(final LocalObjectKey key)
    {
        for (StrengthTrainingItemDTO item : entries)
        {
            SerieDTO serie=Helper.getItem(key,item.series);
            if(serie!=null)
            {
                return serie;
            }
        }
        return null;
    }
}
