package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.DosageType;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.DosageUnit;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.SupplementCycleDayRepetitions;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.TimeType;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.text.ParseException;
import java.util.Hashtable;

public class SupplementCycleDosageDTO implements KvmSerializable {
    
    public double dosage;
    public boolean dosageSpecified;
    public DosageType dosageType;
    public boolean dosageTypeSpecified;
    public DosageUnit dosageUnit;
    public boolean dosageUnitSpecified;
    public String name;
    public SuplementDTO supplement;
    public String comment;
    public SupplementCycleDayRepetitions repetitions;
    public boolean repetitionsSpecified;
    public TimeType timeType;
    public boolean timeTypeSpecified;
    public String globalId;
    public String id;
    public String ref;
    
    public SupplementCycleDosageDTO(){}
    
    public SupplementCycleDosageDTO(SoapObject soapObject,ReferencesManager referencesTable)    throws ParseException
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Dosage"))
        {
            Object obj = soapObject.getProperty("Dosage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Dosage");
                dosage = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                dosage = (Integer) soapObject.getProperty("Dosage");
            }
        }
        if (soapObject.hasProperty("DosageSpecified"))
        {
            Object obj = soapObject.getProperty("DosageSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DosageSpecified");
                dosageSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dosageSpecified = (Boolean) soapObject.getProperty("DosageSpecified");
            }
        }
        if (soapObject.hasProperty("DosageType"))
        {
            Object obj = soapObject.getProperty("DosageType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DosageType");
                dosageType = DosageType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("DosageTypeSpecified"))
        {
            Object obj = soapObject.getProperty("DosageTypeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DosageTypeSpecified");
                dosageTypeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dosageTypeSpecified = (Boolean) soapObject.getProperty("DosageTypeSpecified");
            }
        }
        if (soapObject.hasProperty("DosageUnit"))
        {
            Object obj = soapObject.getProperty("DosageUnit");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DosageUnit");
                dosageUnit = DosageUnit.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("DosageUnitSpecified"))
        {
            Object obj = soapObject.getProperty("DosageUnitSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("DosageUnitSpecified");
                dosageUnitSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dosageUnitSpecified = (Boolean) soapObject.getProperty("DosageUnitSpecified");
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Name");
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) soapObject.getProperty("Name");
            }
        }
        if (soapObject.hasProperty("Supplement"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Supplement");
            supplement =  new SuplementDTO (j,referencesTable);
            
        }
        if (soapObject.hasProperty("Comment"))
        {
            Object obj = soapObject.getProperty("Comment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Comment");
                comment = j.toString();
            }else if (obj!= null && obj instanceof String){
                comment = (String) soapObject.getProperty("Comment");
            }
        }
        if (soapObject.hasProperty("Repetitions"))
        {
            Object obj = soapObject.getProperty("Repetitions");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Repetitions");
                repetitions = SupplementCycleDayRepetitions.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("RepetitionsSpecified"))
        {
            Object obj = soapObject.getProperty("RepetitionsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("RepetitionsSpecified");
                repetitionsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                repetitionsSpecified = (Boolean) soapObject.getProperty("RepetitionsSpecified");
            }
        }
        if (soapObject.hasProperty("TimeType"))
        {
            Object obj = soapObject.getProperty("TimeType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TimeType");
                timeType = TimeType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("TimeTypeSpecified"))
        {
            Object obj = soapObject.getProperty("TimeTypeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("TimeTypeSpecified");
                timeTypeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                timeTypeSpecified = (Boolean) soapObject.getProperty("TimeTypeSpecified");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = j.toString();
            }else if (obj!= null && obj instanceof String){
                globalId = (String) soapObject.getProperty("GlobalId");
            }
        }
        if (soapObject.hasProperty("Id"))
        {
            Object obj = soapObject.getProperty("Id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Id");
                id = j.toString();
            }else if (obj!= null && obj instanceof String){
                id = (String) soapObject.getProperty("Id");
            }
        }
        if (soapObject.hasProperty("Ref"))
        {
            Object obj = soapObject.getProperty("Ref");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Ref");
                ref = j.toString();
            }else if (obj!= null && obj instanceof String){
                ref = (String) soapObject.getProperty("Ref");
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return dosage;
            case 1:
                return dosageSpecified;
            case 2:
                return dosageType.toString();
            case 3:
                return dosageTypeSpecified;
            case 4:
                return dosageUnit.toString();
            case 5:
                return dosageUnitSpecified;
            case 6:
                return name;
            case 7:
                return supplement;
            case 8:
                return comment;
            case 9:
                return repetitions.toString();
            case 10:
                return repetitionsSpecified;
            case 11:
                return timeType.toString();
            case 12:
                return timeTypeSpecified;
            case 13:
                return globalId;
            case 14:
                return id;
            case 15:
                return ref;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 16;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = Double.class;
                info.name = "Dosage";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DosageSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DosageType";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DosageTypeSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DosageUnit";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "DosageUnitSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 7:
                info.type = SuplementDTO.class;
                info.name = "Supplement";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Comment";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Repetitions";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RepetitionsSpecified";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TimeType";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "TimeTypeSpecified";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Id";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Ref";
                break;
        }
    }

    

    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
