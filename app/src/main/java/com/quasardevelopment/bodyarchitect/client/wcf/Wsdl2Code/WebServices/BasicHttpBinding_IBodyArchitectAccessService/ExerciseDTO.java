package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.model.IRatingable;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.text.ParseException;
import java.util.Hashtable;
import java.util.UUID;

public class ExerciseDTO extends ExerciseLightDTO implements Serializable,IRatingable {
    
    public String description;
    public boolean isDeleted;
    public UserDTO profile;
    public float rating;
    public float userRating;
    public String userShortComment;
    public String url;
    public int version;
    
    public ExerciseDTO(){}
    
    public ExerciseDTO(SoapObject soapObject,ReferencesManager referencesTable)     throws ParseException
    {
        super(soapObject,referencesTable);
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Description"))
        {
            Object obj = soapObject.getProperty("Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Description");
                description = j.toString();
            }else if (obj!= null && obj instanceof String){
                description = (String) soapObject.getProperty("Description");
            }
        }
        if (soapObject.hasProperty("IsDeleted"))
        {
            Object obj = soapObject.getProperty("IsDeleted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("IsDeleted");
                isDeleted = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isDeleted = (Boolean) soapObject.getProperty("IsDeleted");
            }
        }
        if (soapObject.hasProperty("Profile"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Profile");
            profile = (UserDTO)referencesTable.get(j,UserDTO.class);
            
        }
        if (soapObject.hasProperty("Rating"))
        {
            Object obj = soapObject.getProperty("Rating");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Rating");
                rating = Float.parseFloat(j.toString());
            }else if (obj!= null && obj instanceof Number){
                rating = (Integer) soapObject.getProperty("Rating");
            }
        }
        if (soapObject.hasProperty("UserRating"))
        {
            Object obj = soapObject.getProperty("UserRating");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UserRating");
                userRating = Float.parseFloat(j.toString());
            }else if (obj!= null && obj instanceof Number){
                userRating = (Integer) soapObject.getProperty("UserRating");
            }
        }
        if (soapObject.hasProperty("Url"))
        {
            Object obj = soapObject.getProperty("Url");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Url");
                url = j.toString();
            }else if (obj!= null && obj instanceof String){
                url = (String) soapObject.getProperty("Url");
            }
        }
        if (soapObject.hasProperty("UserShortComment"))
        {
            Object obj = soapObject.getProperty("UserShortComment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UserShortComment");
                userShortComment = j.toString();
            }else if (obj!= null && obj instanceof String){
                userShortComment = (String) soapObject.getProperty("UserShortComment");
            }
        }
        if (soapObject.hasProperty("Version"))
        {
            Object obj = soapObject.getProperty("Version");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Version");
                version = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                version = (Integer) soapObject.getProperty("Version");
            }
        }

    }
    @Override
    public Object getProperty(int arg0) {
        int count=super.getPropertyCount();
        if(arg0==count)
        {
            return description;
        }
        if(arg0==count+1)
        {
            return isDeleted;
        }
        if(arg0==count+2)
        {
            return profile;
        }
        if(arg0==count+3)
        {
            return rating;
        }
        if(arg0==count+4)
        {
            return userRating;
        }
        if(arg0==count+5)
        {
            return userShortComment;
        }
        if(arg0==count+6)
        {
            return version;
        }
        return super.getProperty(arg0);
    }
    
    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+7;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        int count=super.getPropertyCount();
        if(index==count)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Description";
        }
        if(index==count+1)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "IsDeleted";
        }
        if(index==count+2)
        {
            info.type = UserDTO.class;
            info.name = "Profile";
        }
        if(index==count+3)
        {
            info.type = Float.class;
            info.name = "Rating";
        }
        if(index==count+4)
        {
            info.type = Float.class;
            info.name = "UserRating";
        }
        if(index==count+5)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "UserShortComment";
        }
        if(index==count+6)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "Version";
        }
        super.getPropertyInfo(index,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    @Override
    public UUID getGlobalId() {
        return globalId;
    }

    @Override
    public float getRating() {
        return rating;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public Float getUserRating() {
        return userRating;
    }

    @Override
    public String getUserShortComment() {
        return userShortComment;
    }

    @Override
    public UserDTO getProfile() {
        return profile;
    }
}
