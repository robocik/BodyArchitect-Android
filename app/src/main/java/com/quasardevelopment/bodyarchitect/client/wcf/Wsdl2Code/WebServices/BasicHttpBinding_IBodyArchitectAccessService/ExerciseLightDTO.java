package com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/11/2013 5:22:00 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import com.quasardevelopment.bodyarchitect.client.model.Settings;
import com.quasardevelopment.bodyarchitect.client.util.ApplicationState;
import com.quasardevelopment.bodyarchitect.client.util.DateTimeHelper;
import com.quasardevelopment.bodyarchitect.client.wcf.ReferencesManager;
import com.quasardevelopment.bodyarchitect.client.wcf.WcfConstans;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.ExerciseDifficult;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.ExerciseForceType;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.ExerciseType;
import com.quasardevelopment.bodyarchitect.client.wcf.Wsdl2Code.WebServices.BasicHttpBinding_IBodyArchitectAccessService.WS_Enums.MechanicsType;
import org.joda.time.DateTime;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.io.Serializable;
import java.text.ParseException;
import java.util.Hashtable;
import java.util.UUID;

public class ExerciseLightDTO extends BAGlobalObject implements KvmSerializable,Serializable,WcfInterfaces.IReferenceObject {

    public DateTime creationDate;
    public ExerciseDifficult difficult=ExerciseDifficult.NotSet;
    public ExerciseForceType exerciseForceType=ExerciseForceType.NotSet;
    public ExerciseType exerciseType=ExerciseType.NotSet;
    public MechanicsType mechanicsType=MechanicsType.NotSet;
    public double met;
    public String name;
    public UUID profileId;
    public String shortcut;
    public boolean useInRecords;
    
    public ExerciseLightDTO(){}
    
    public ExerciseLightDTO(SoapObject soapObject,ReferencesManager referencesTable)   throws ParseException
    {
        if (soapObject == null)
            return;
        if (soapObject.hasAttribute("Id"))
        {
            Object obj = soapObject.getAttribute("Id");
            referencesTable.Add((String) obj, this);
        }
        if (soapObject.hasProperty("CreationDate"))
        {
            Object obj = soapObject.getProperty("CreationDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("CreationDate");
                creationDate = DateTimeHelper.ConvertFromWebServiceNew(j.toString());
            }else if (obj!= null && obj instanceof String){
                creationDate = DateTimeHelper.ConvertFromWebServiceNew((String) soapObject.getProperty("CreationDate"));
            }
        }
        if (soapObject.hasProperty("Difficult"))
        {
            Object obj = soapObject.getProperty("Difficult");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Difficult");
                difficult = ExerciseDifficult.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("ExerciseForceType"))
        {
            Object obj = soapObject.getProperty("ExerciseForceType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ExerciseForceType");
                exerciseForceType = ExerciseForceType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("ExerciseType"))
        {
            Object obj = soapObject.getProperty("ExerciseType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ExerciseType");
                exerciseType = ExerciseType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("MechanicsType"))
        {
            Object obj = soapObject.getProperty("MechanicsType");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("MechanicsType");
                mechanicsType = MechanicsType.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("Met"))
        {
            Object obj = soapObject.getProperty("Met");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Met");
                met = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                met = (Integer) soapObject.getProperty("Met");
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Name");
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) soapObject.getProperty("Name");
            }
        }
        if (soapObject.hasProperty("ProfileId"))
        {
            Object obj = soapObject.getProperty("ProfileId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("ProfileId");
                profileId =UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                profileId = UUID.fromString((String) soapObject.getProperty("ProfileId"));
            }
        }
        if (soapObject.hasProperty("Shortcut"))
        {
            Object obj = soapObject.getProperty("Shortcut");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("Shortcut");
                shortcut = j.toString();
            }else if (obj!= null && obj instanceof String){
                shortcut = (String) soapObject.getProperty("Shortcut");
            }
        }
        if (soapObject.hasProperty("UseInRecords"))
        {
            Object obj = soapObject.getProperty("UseInRecords");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("UseInRecords");
                useInRecords = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                useInRecords = (Boolean) soapObject.getProperty("UseInRecords");
            }
        }
        if (soapObject.hasProperty("GlobalId"))
        {
            Object obj = soapObject.getProperty("GlobalId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) soapObject.getProperty("GlobalId");
                globalId = UUID.fromString(j.toString());
            }else if (obj!= null && obj instanceof String){
                globalId = UUID.fromString((String) soapObject.getProperty("GlobalId"));
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return globalId;
            case 1:
                return difficult.toString();
            case 2:
                return exerciseForceType.toString();
            case 3:
                return exerciseType.toString();
            case 4:
                return mechanicsType.toString();
            case 5:
                return met;
            case 6:
                return name;
            case 7:
                return profileId;
            case 8:
                return shortcut;
            case 9:
                return useInRecords;
            case 10:
                return creationDate;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 11;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GlobalId";
                break;

            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Difficult";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExerciseForceType";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ExerciseType";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "MechanicsType";
                break;
            case 5:
                info.type = Double.class;
                info.name = "Met";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ProfileId";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Shortcut";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "UseInRecords";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CreationDate";
                break;

        }
        info.namespace= WcfConstans.ServiceNamespace;
    }

    

    public String getDisplayText()
    {
        return Settings.getSortExercises()==0?name:shortcut;
    }
    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    public boolean isMine() {
        if(profileId==null || !ApplicationState.getCurrent().getSessionData().profile.globalId.equals(profileId))
        {
            return false;
        }
        return true;
    }
}
